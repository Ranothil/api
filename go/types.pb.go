// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//Types of named entities
type NamedEntity int32

const (
	NamedEntity_ASSET_ENTITY        NamedEntity = 0
	NamedEntity_PERSON_ENTITY       NamedEntity = 1
	NamedEntity_LOCATION_ENTITY     NamedEntity = 2
	NamedEntity_COMPANY_ENTITY      NamedEntity = 3
	NamedEntity_EXCHANGE_ENTITY     NamedEntity = 4
	NamedEntity_MISC_ENTITY         NamedEntity = 5
	NamedEntity_ORGANIZATION_ENTITY NamedEntity = 6
)

var NamedEntity_name = map[int32]string{
	0: "ASSET_ENTITY",
	1: "PERSON_ENTITY",
	2: "LOCATION_ENTITY",
	3: "COMPANY_ENTITY",
	4: "EXCHANGE_ENTITY",
	5: "MISC_ENTITY",
	6: "ORGANIZATION_ENTITY",
}

var NamedEntity_value = map[string]int32{
	"ASSET_ENTITY":        0,
	"PERSON_ENTITY":       1,
	"LOCATION_ENTITY":     2,
	"COMPANY_ENTITY":      3,
	"EXCHANGE_ENTITY":     4,
	"MISC_ENTITY":         5,
	"ORGANIZATION_ENTITY": 6,
}

func (x NamedEntity) String() string {
	return proto.EnumName(NamedEntity_name, int32(x))
}

func (NamedEntity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

//*
//Base model for messages or news, contains basic data like title, content, source, published date etc..
type BaseModel struct {
	// unique identifier with schema
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// title of article
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// full content stripped of unnecessary characters(js, html tags...)
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	//
	Crawler string `protobuf:"bytes,4,opt,name=crawler,proto3" json:"crawler,omitempty"`
	// timestamp representing the datetime, when the article has been published
	PubDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	// timestamp representing acquisition datetime
	Created *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// url of article
	Source string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// summary provided by the domain
	Excerpt string `protobuf:"bytes,8,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	// list of video sources
	Videos []string `protobuf:"bytes,9,rep,name=videos,proto3" json:"videos,omitempty"`
	// list of image sources
	Images []string `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	// list of off-page hyperlinks
	Links []string `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	// author of article
	Author string `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	// identified language
	Lang string `protobuf:"bytes,13,opt,name=lang,proto3" json:"lang,omitempty"`
	// importance of the article's creator
	Weight               float64  `protobuf:"fixed64,14,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseModel) Reset()         { *m = BaseModel{} }
func (m *BaseModel) String() string { return proto.CompactTextString(m) }
func (*BaseModel) ProtoMessage()    {}
func (*BaseModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *BaseModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseModel.Unmarshal(m, b)
}
func (m *BaseModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseModel.Marshal(b, m, deterministic)
}
func (m *BaseModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseModel.Merge(m, src)
}
func (m *BaseModel) XXX_Size() int {
	return xxx_messageInfo_BaseModel.Size(m)
}
func (m *BaseModel) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseModel.DiscardUnknown(m)
}

var xxx_messageInfo_BaseModel proto.InternalMessageInfo

func (m *BaseModel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BaseModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BaseModel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BaseModel) GetCrawler() string {
	if m != nil {
		return m.Crawler
	}
	return ""
}

func (m *BaseModel) GetPubDate() *timestamp.Timestamp {
	if m != nil {
		return m.PubDate
	}
	return nil
}

func (m *BaseModel) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *BaseModel) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BaseModel) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *BaseModel) GetVideos() []string {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *BaseModel) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *BaseModel) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *BaseModel) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BaseModel) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *BaseModel) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

//*
//Group data that refers to sentiment of message
type SentimentModel struct {
	// analyzed sentiment <-10, 10>
	Sentiment float64 `protobuf:"fixed64,1,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	// analyzed impact in the respective area
	MarketImpact         float64  `protobuf:"fixed64,2,opt,name=market_impact,json=marketImpact,proto3" json:"market_impact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentModel) Reset()         { *m = SentimentModel{} }
func (m *SentimentModel) String() string { return proto.CompactTextString(m) }
func (*SentimentModel) ProtoMessage()    {}
func (*SentimentModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

func (m *SentimentModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentModel.Unmarshal(m, b)
}
func (m *SentimentModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentModel.Marshal(b, m, deterministic)
}
func (m *SentimentModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentModel.Merge(m, src)
}
func (m *SentimentModel) XXX_Size() int {
	return xxx_messageInfo_SentimentModel.Size(m)
}
func (m *SentimentModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentModel.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentModel proto.InternalMessageInfo

func (m *SentimentModel) GetSentiment() float64 {
	if m != nil {
		return m.Sentiment
	}
	return 0
}

func (m *SentimentModel) GetMarketImpact() float64 {
	if m != nil {
		return m.MarketImpact
	}
	return 0
}

type CryptopanicEntrySource struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Domain               string   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntrySource) Reset()         { *m = CryptopanicEntrySource{} }
func (m *CryptopanicEntrySource) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntrySource) ProtoMessage()    {}
func (*CryptopanicEntrySource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}

func (m *CryptopanicEntrySource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntrySource.Unmarshal(m, b)
}
func (m *CryptopanicEntrySource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntrySource.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntrySource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntrySource.Merge(m, src)
}
func (m *CryptopanicEntrySource) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntrySource.Size(m)
}
func (m *CryptopanicEntrySource) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntrySource.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntrySource proto.InternalMessageInfo

func (m *CryptopanicEntrySource) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicEntrySource) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CryptopanicEntrySource) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicEntrySource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CryptopanicEntryVotes struct {
	Negative             int32    `protobuf:"varint,1,opt,name=negative,proto3" json:"negative,omitempty"`
	Positive             int32    `protobuf:"varint,2,opt,name=positive,proto3" json:"positive,omitempty"`
	Important            int32    `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`
	Liked                int32    `protobuf:"varint,4,opt,name=liked,proto3" json:"liked,omitempty"`
	Disliked             int32    `protobuf:"varint,5,opt,name=disliked,proto3" json:"disliked,omitempty"`
	Lol                  int32    `protobuf:"varint,6,opt,name=lol,proto3" json:"lol,omitempty"`
	Toxic                int32    `protobuf:"varint,7,opt,name=toxic,proto3" json:"toxic,omitempty"`
	Saved                int32    `protobuf:"varint,8,opt,name=saved,proto3" json:"saved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntryVotes) Reset()         { *m = CryptopanicEntryVotes{} }
func (m *CryptopanicEntryVotes) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntryVotes) ProtoMessage()    {}
func (*CryptopanicEntryVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}

func (m *CryptopanicEntryVotes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntryVotes.Unmarshal(m, b)
}
func (m *CryptopanicEntryVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntryVotes.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntryVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntryVotes.Merge(m, src)
}
func (m *CryptopanicEntryVotes) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntryVotes.Size(m)
}
func (m *CryptopanicEntryVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntryVotes.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntryVotes proto.InternalMessageInfo

func (m *CryptopanicEntryVotes) GetNegative() int32 {
	if m != nil {
		return m.Negative
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetPositive() int32 {
	if m != nil {
		return m.Positive
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetImportant() int32 {
	if m != nil {
		return m.Important
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLiked() int32 {
	if m != nil {
		return m.Liked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetDisliked() int32 {
	if m != nil {
		return m.Disliked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLol() int32 {
	if m != nil {
		return m.Lol
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetToxic() int32 {
	if m != nil {
		return m.Toxic
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetSaved() int32 {
	if m != nil {
		return m.Saved
	}
	return 0
}

type CryptopanicEntryMetadata struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntryMetadata) Reset()         { *m = CryptopanicEntryMetadata{} }
func (m *CryptopanicEntryMetadata) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntryMetadata) ProtoMessage()    {}
func (*CryptopanicEntryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}

func (m *CryptopanicEntryMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntryMetadata.Unmarshal(m, b)
}
func (m *CryptopanicEntryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntryMetadata.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntryMetadata.Merge(m, src)
}
func (m *CryptopanicEntryMetadata) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntryMetadata.Size(m)
}
func (m *CryptopanicEntryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntryMetadata proto.InternalMessageInfo

func (m *CryptopanicEntryMetadata) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CryptopanicEntryMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CryptopanicRawEntry struct {
	Kind                 string                    `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Domain               string                    `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Source               *CryptopanicEntrySource   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Title                string                    `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	PublishedAt          string                    `protobuf:"bytes,5,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Slug                 string                    `protobuf:"bytes,6,opt,name=slug,proto3" json:"slug,omitempty"`
	Id                   int32                     `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string                    `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt            string                    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Votes                *CryptopanicEntryVotes    `protobuf:"bytes,10,opt,name=votes,proto3" json:"votes,omitempty"`
	Metadata             *CryptopanicEntryMetadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CryptopanicRawEntry) Reset()         { *m = CryptopanicRawEntry{} }
func (m *CryptopanicRawEntry) String() string { return proto.CompactTextString(m) }
func (*CryptopanicRawEntry) ProtoMessage()    {}
func (*CryptopanicRawEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}

func (m *CryptopanicRawEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicRawEntry.Unmarshal(m, b)
}
func (m *CryptopanicRawEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicRawEntry.Marshal(b, m, deterministic)
}
func (m *CryptopanicRawEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicRawEntry.Merge(m, src)
}
func (m *CryptopanicRawEntry) XXX_Size() int {
	return xxx_messageInfo_CryptopanicRawEntry.Size(m)
}
func (m *CryptopanicRawEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicRawEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicRawEntry proto.InternalMessageInfo

func (m *CryptopanicRawEntry) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *CryptopanicRawEntry) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSource() *CryptopanicEntrySource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CryptopanicRawEntry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicRawEntry) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *CryptopanicRawEntry) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CryptopanicRawEntry) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CryptopanicRawEntry) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetVotes() *CryptopanicEntryVotes {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *CryptopanicRawEntry) GetMetadata() *CryptopanicEntryMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type CryptopanicFeed struct {
	Count                int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results              []*CryptopanicRawEntry `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CryptopanicFeed) Reset()         { *m = CryptopanicFeed{} }
func (m *CryptopanicFeed) String() string { return proto.CompactTextString(m) }
func (*CryptopanicFeed) ProtoMessage()    {}
func (*CryptopanicFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}

func (m *CryptopanicFeed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicFeed.Unmarshal(m, b)
}
func (m *CryptopanicFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicFeed.Marshal(b, m, deterministic)
}
func (m *CryptopanicFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicFeed.Merge(m, src)
}
func (m *CryptopanicFeed) XXX_Size() int {
	return xxx_messageInfo_CryptopanicFeed.Size(m)
}
func (m *CryptopanicFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicFeed.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicFeed proto.InternalMessageInfo

func (m *CryptopanicFeed) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CryptopanicFeed) GetResults() []*CryptopanicRawEntry {
	if m != nil {
		return m.Results
	}
	return nil
}

type CryptopanicPost struct {
	CryptopanicRawEntry  *CryptopanicRawEntry `protobuf:"bytes,1,opt,name=cryptopanic_raw_entry,json=cryptopanicRawEntry,proto3" json:"cryptopanic_raw_entry,omitempty"`
	Article              *Article             `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CryptopanicPost) Reset()         { *m = CryptopanicPost{} }
func (m *CryptopanicPost) String() string { return proto.CompactTextString(m) }
func (*CryptopanicPost) ProtoMessage()    {}
func (*CryptopanicPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}

func (m *CryptopanicPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicPost.Unmarshal(m, b)
}
func (m *CryptopanicPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicPost.Marshal(b, m, deterministic)
}
func (m *CryptopanicPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicPost.Merge(m, src)
}
func (m *CryptopanicPost) XXX_Size() int {
	return xxx_messageInfo_CryptopanicPost.Size(m)
}
func (m *CryptopanicPost) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicPost.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicPost proto.InternalMessageInfo

func (m *CryptopanicPost) GetCryptopanicRawEntry() *CryptopanicRawEntry {
	if m != nil {
		return m.CryptopanicRawEntry
	}
	return nil
}

func (m *CryptopanicPost) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

//*
//Occurrence od named entity.
//contains position, matched text, category
type NamedEntityOccurrence struct {
	// Represents NamedEntity element
	Label NamedEntity `protobuf:"varint,1,opt,name=label,proto3,enum=NamedEntity" json:"label,omitempty"`
	// Start position of occurrence
	Start uint32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// End position of occurrence
	End uint32 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// Matched text
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamedEntityOccurrence) Reset()         { *m = NamedEntityOccurrence{} }
func (m *NamedEntityOccurrence) String() string { return proto.CompactTextString(m) }
func (*NamedEntityOccurrence) ProtoMessage()    {}
func (*NamedEntityOccurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}

func (m *NamedEntityOccurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedEntityOccurrence.Unmarshal(m, b)
}
func (m *NamedEntityOccurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedEntityOccurrence.Marshal(b, m, deterministic)
}
func (m *NamedEntityOccurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedEntityOccurrence.Merge(m, src)
}
func (m *NamedEntityOccurrence) XXX_Size() int {
	return xxx_messageInfo_NamedEntityOccurrence.Size(m)
}
func (m *NamedEntityOccurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedEntityOccurrence.DiscardUnknown(m)
}

var xxx_messageInfo_NamedEntityOccurrence proto.InternalMessageInfo

func (m *NamedEntityOccurrence) GetLabel() NamedEntity {
	if m != nil {
		return m.Label
	}
	return NamedEntity_ASSET_ENTITY
}

func (m *NamedEntityOccurrence) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *NamedEntityOccurrence) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *NamedEntityOccurrence) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

//*
//Groups all types of named entities we support.
type NamedEntitiesModel struct {
	// list of crypto assets
	Symbols []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// recognized cryptocurrencies
	Assets []*NamedEntityOccurrence `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	// recognized persons
	Persons []*NamedEntityOccurrence `protobuf:"bytes,3,rep,name=persons,proto3" json:"persons,omitempty"`
	// recognized companies
	Companies []*NamedEntityOccurrence `protobuf:"bytes,4,rep,name=companies,proto3" json:"companies,omitempty"`
	// recognized organizations
	Organizations []*NamedEntityOccurrence `protobuf:"bytes,5,rep,name=organizations,proto3" json:"organizations,omitempty"`
	// recognized locations
	Locations []*NamedEntityOccurrence `protobuf:"bytes,6,rep,name=locations,proto3" json:"locations,omitempty"`
	// recognized exchanges
	Exchanges []*NamedEntityOccurrence `protobuf:"bytes,7,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	// recognized misc objects
	Misc []*NamedEntityOccurrence `protobuf:"bytes,8,rep,name=misc,proto3" json:"misc,omitempty"`
	// list of assigned tags
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// mapped asset to its mention count
	AssetMentions map[string]int32 `protobuf:"bytes,10,rep,name=asset_mentions,json=assetMentions,proto3" json:"asset_mentions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// cleaned text which uses NER
	SourceText           string   `protobuf:"bytes,11,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamedEntitiesModel) Reset()         { *m = NamedEntitiesModel{} }
func (m *NamedEntitiesModel) String() string { return proto.CompactTextString(m) }
func (*NamedEntitiesModel) ProtoMessage()    {}
func (*NamedEntitiesModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}

func (m *NamedEntitiesModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedEntitiesModel.Unmarshal(m, b)
}
func (m *NamedEntitiesModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedEntitiesModel.Marshal(b, m, deterministic)
}
func (m *NamedEntitiesModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedEntitiesModel.Merge(m, src)
}
func (m *NamedEntitiesModel) XXX_Size() int {
	return xxx_messageInfo_NamedEntitiesModel.Size(m)
}
func (m *NamedEntitiesModel) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedEntitiesModel.DiscardUnknown(m)
}

var xxx_messageInfo_NamedEntitiesModel proto.InternalMessageInfo

func (m *NamedEntitiesModel) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssets() []*NamedEntityOccurrence {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NamedEntitiesModel) GetPersons() []*NamedEntityOccurrence {
	if m != nil {
		return m.Persons
	}
	return nil
}

func (m *NamedEntitiesModel) GetCompanies() []*NamedEntityOccurrence {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *NamedEntitiesModel) GetOrganizations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *NamedEntitiesModel) GetLocations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *NamedEntitiesModel) GetExchanges() []*NamedEntityOccurrence {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

func (m *NamedEntitiesModel) GetMisc() []*NamedEntityOccurrence {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *NamedEntitiesModel) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssetMentions() map[string]int32 {
	if m != nil {
		return m.AssetMentions
	}
	return nil
}

func (m *NamedEntitiesModel) GetSourceText() string {
	if m != nil {
		return m.SourceText
	}
	return ""
}

//*
//Basic model for News, articles.
//It's weight depends on Alexa ranks
type Article struct {
	Base      *BaseModel      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment *SentimentModel `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	// named entities from content
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// named entities from title
	TitleData            *NamedEntitiesModel `protobuf:"bytes,4,opt,name=title_data,json=titleData,proto3" json:"title_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}

func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Article) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Article) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *Article) GetTitleData() *NamedEntitiesModel {
	if m != nil {
		return m.TitleData
	}
	return nil
}

//*
//Basic model for media where the messages are wrote by regular user
type UserMessage struct {
	Base          *BaseModel          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment     *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// nickname of user
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// text of message
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMessage) Reset()         { *m = UserMessage{} }
func (m *UserMessage) String() string { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()    {}
func (*UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{11}
}

func (m *UserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMessage.Unmarshal(m, b)
}
func (m *UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMessage.Marshal(b, m, deterministic)
}
func (m *UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMessage.Merge(m, src)
}
func (m *UserMessage) XXX_Size() int {
	return xxx_messageInfo_UserMessage.Size(m)
}
func (m *UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UserMessage proto.InternalMessageInfo

func (m *UserMessage) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserMessage) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *UserMessage) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *UserMessage) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//User message from bitmex
type BitmexUserMessage struct {
	UserMessage          *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BitmexUserMessage) Reset()         { *m = BitmexUserMessage{} }
func (m *BitmexUserMessage) String() string { return proto.CompactTextString(m) }
func (*BitmexUserMessage) ProtoMessage()    {}
func (*BitmexUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{12}
}

func (m *BitmexUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitmexUserMessage.Unmarshal(m, b)
}
func (m *BitmexUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitmexUserMessage.Marshal(b, m, deterministic)
}
func (m *BitmexUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitmexUserMessage.Merge(m, src)
}
func (m *BitmexUserMessage) XXX_Size() int {
	return xxx_messageInfo_BitmexUserMessage.Size(m)
}
func (m *BitmexUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BitmexUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BitmexUserMessage proto.InternalMessageInfo

func (m *BitmexUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

//*
//Message from telegram channel
//Weight is calculated from number of members in channel
type TelegramUserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
	// symbols loaded from db
	SymbolsBackup []string `protobuf:"bytes,2,rep,name=symbols_backup,json=symbolsBackup,proto3" json:"symbols_backup,omitempty"`
	// telegram channel ID
	ChannelId int32 `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// telegram channel members
	ChannelSubscriberCount int32 `protobuf:"varint,4,opt,name=channel_subscriber_count,json=channelSubscriberCount,proto3" json:"channel_subscriber_count,omitempty"`
	// telegram message ID
	MessageId            int64    `protobuf:"varint,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelegramUserMessage) Reset()         { *m = TelegramUserMessage{} }
func (m *TelegramUserMessage) String() string { return proto.CompactTextString(m) }
func (*TelegramUserMessage) ProtoMessage()    {}
func (*TelegramUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{13}
}

func (m *TelegramUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelegramUserMessage.Unmarshal(m, b)
}
func (m *TelegramUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelegramUserMessage.Marshal(b, m, deterministic)
}
func (m *TelegramUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelegramUserMessage.Merge(m, src)
}
func (m *TelegramUserMessage) XXX_Size() int {
	return xxx_messageInfo_TelegramUserMessage.Size(m)
}
func (m *TelegramUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TelegramUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TelegramUserMessage proto.InternalMessageInfo

func (m *TelegramUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *TelegramUserMessage) GetSymbolsBackup() []string {
	if m != nil {
		return m.SymbolsBackup
	}
	return nil
}

func (m *TelegramUserMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TelegramUserMessage) GetChannelSubscriberCount() int32 {
	if m != nil {
		return m.ChannelSubscriberCount
	}
	return 0
}

func (m *TelegramUserMessage) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

//*
//Message from discord chats
type DiscordUserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
	// unique ID of discord channel
	ChannelId            string   `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId              string   `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscordUserMessage) Reset()         { *m = DiscordUserMessage{} }
func (m *DiscordUserMessage) String() string { return proto.CompactTextString(m) }
func (*DiscordUserMessage) ProtoMessage()    {}
func (*DiscordUserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{14}
}

func (m *DiscordUserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscordUserMessage.Unmarshal(m, b)
}
func (m *DiscordUserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscordUserMessage.Marshal(b, m, deterministic)
}
func (m *DiscordUserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscordUserMessage.Merge(m, src)
}
func (m *DiscordUserMessage) XXX_Size() int {
	return xxx_messageInfo_DiscordUserMessage.Size(m)
}
func (m *DiscordUserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscordUserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DiscordUserMessage proto.InternalMessageInfo

func (m *DiscordUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *DiscordUserMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *DiscordUserMessage) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

//*
//Stores time/count snapshot of Reddit post comment count
//this is mainly for measuring amount of added comments during period of time
type CommentCountTimeSnapshot struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	CommentCount         int32                `protobuf:"varint,2,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CommentCountTimeSnapshot) Reset()         { *m = CommentCountTimeSnapshot{} }
func (m *CommentCountTimeSnapshot) String() string { return proto.CompactTextString(m) }
func (*CommentCountTimeSnapshot) ProtoMessage()    {}
func (*CommentCountTimeSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{15}
}

func (m *CommentCountTimeSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentCountTimeSnapshot.Unmarshal(m, b)
}
func (m *CommentCountTimeSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentCountTimeSnapshot.Marshal(b, m, deterministic)
}
func (m *CommentCountTimeSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentCountTimeSnapshot.Merge(m, src)
}
func (m *CommentCountTimeSnapshot) XXX_Size() int {
	return xxx_messageInfo_CommentCountTimeSnapshot.Size(m)
}
func (m *CommentCountTimeSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentCountTimeSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CommentCountTimeSnapshot proto.InternalMessageInfo

func (m *CommentCountTimeSnapshot) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CommentCountTimeSnapshot) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

//*
//Reddit comment
type Comment struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permalink            string     `protobuf:"bytes,3,opt,name=permalink,proto3" json:"permalink,omitempty"`
	CreatedUTC           uint64     `protobuf:"varint,4,opt,name=createdUTC,proto3" json:"createdUTC,omitempty"`
	Deleted              bool       `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Ups                  int32      `protobuf:"varint,14,opt,name=ups,proto3" json:"ups,omitempty"`
	Downs                int32      `protobuf:"varint,15,opt,name=downs,proto3" json:"downs,omitempty"`
	Likes                bool       `protobuf:"varint,16,opt,name=likes,proto3" json:"likes,omitempty"`
	Body                 string     `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	Subreddit            string     `protobuf:"bytes,7,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	Replies              []*Comment `protobuf:"bytes,8,rep,name=replies,proto3" json:"replies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{16}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Comment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Comment) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Comment) GetCreatedUTC() uint64 {
	if m != nil {
		return m.CreatedUTC
	}
	return 0
}

func (m *Comment) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Comment) GetUps() int32 {
	if m != nil {
		return m.Ups
	}
	return 0
}

func (m *Comment) GetDowns() int32 {
	if m != nil {
		return m.Downs
	}
	return 0
}

func (m *Comment) GetLikes() bool {
	if m != nil {
		return m.Likes
	}
	return false
}

func (m *Comment) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Comment) GetSubreddit() string {
	if m != nil {
		return m.Subreddit
	}
	return ""
}

func (m *Comment) GetReplies() []*Comment {
	if m != nil {
		return m.Replies
	}
	return nil
}

//*
//Stores useful data from original reddit post
type RedditPostModel struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	CreatedUTC  uint64 `protobuf:"varint,2,opt,name=createdUTC,proto3" json:"createdUTC,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	URL         string `protobuf:"bytes,4,opt,name=URL,json=uRL,proto3" json:"URL,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	SelfText    string `protobuf:"bytes,6,opt,name=self_text,json=selfText,proto3" json:"self_text,omitempty"`
	Name        string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Permalink   string `protobuf:"bytes,12,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Deleted     bool   `protobuf:"varint,13,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Ups         int32  `protobuf:"varint,14,opt,name=ups,proto3" json:"ups,omitempty"`
	Downs       int32  `protobuf:"varint,15,opt,name=downs,proto3" json:"downs,omitempty"`
	Likes       bool   `protobuf:"varint,16,opt,name=likes,proto3" json:"likes,omitempty"`
	NumComments int32  `protobuf:"varint,17,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	Score       int32  `protobuf:"varint,18,opt,name=score,proto3" json:"score,omitempty"`
	//list of comments
	Replies []*Comment `protobuf:"bytes,19,rep,name=replies,proto3" json:"replies,omitempty"`
	Domain  string     `protobuf:"bytes,20,opt,name=domain,proto3" json:"domain,omitempty"`
	// unique ID of subreddit
	SubredditID         string `protobuf:"bytes,21,opt,name=SubredditID,json=subredditID,proto3" json:"SubredditID,omitempty"`
	Hidden              bool   `protobuf:"varint,22,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Locked              bool   `protobuf:"varint,23,opt,name=locked,proto3" json:"locked,omitempty"`
	Thumbnail           string `protobuf:"bytes,24,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Gilded              int32  `protobuf:"varint,25,opt,name=gilded,proto3" json:"gilded,omitempty"`
	Distinguished       string `protobuf:"bytes,26,opt,name=distinguished,proto3" json:"distinguished,omitempty"`
	Stickied            bool   `protobuf:"varint,27,opt,name=stickied,proto3" json:"stickied,omitempty"`
	IsRedditMediaDomain bool   `protobuf:"varint,28,opt,name=is_reddit_media_domain,json=isRedditMediaDomain,proto3" json:"is_reddit_media_domain,omitempty"`
	// time/count snapshot of Reddit post comment count
	CommentCountSnapshot []*CommentCountTimeSnapshot `protobuf:"bytes,7,rep,name=comment_count_snapshot,json=commentCountSnapshot,proto3" json:"comment_count_snapshot,omitempty"`
	// Reddit post actual hot rate in queue
	HotRate float64 `protobuf:"fixed64,8,opt,name=hot_rate,json=hotRate,proto3" json:"hot_rate,omitempty"`
	// Reference to parent subreddit
	Subreddit            string   `protobuf:"bytes,9,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	IsSelf               bool     `protobuf:"varint,10,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedditPostModel) Reset()         { *m = RedditPostModel{} }
func (m *RedditPostModel) String() string { return proto.CompactTextString(m) }
func (*RedditPostModel) ProtoMessage()    {}
func (*RedditPostModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{17}
}

func (m *RedditPostModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedditPostModel.Unmarshal(m, b)
}
func (m *RedditPostModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedditPostModel.Marshal(b, m, deterministic)
}
func (m *RedditPostModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedditPostModel.Merge(m, src)
}
func (m *RedditPostModel) XXX_Size() int {
	return xxx_messageInfo_RedditPostModel.Size(m)
}
func (m *RedditPostModel) XXX_DiscardUnknown() {
	xxx_messageInfo_RedditPostModel.DiscardUnknown(m)
}

var xxx_messageInfo_RedditPostModel proto.InternalMessageInfo

func (m *RedditPostModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RedditPostModel) GetCreatedUTC() uint64 {
	if m != nil {
		return m.CreatedUTC
	}
	return 0
}

func (m *RedditPostModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RedditPostModel) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *RedditPostModel) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *RedditPostModel) GetSelfText() string {
	if m != nil {
		return m.SelfText
	}
	return ""
}

func (m *RedditPostModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RedditPostModel) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *RedditPostModel) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *RedditPostModel) GetUps() int32 {
	if m != nil {
		return m.Ups
	}
	return 0
}

func (m *RedditPostModel) GetDowns() int32 {
	if m != nil {
		return m.Downs
	}
	return 0
}

func (m *RedditPostModel) GetLikes() bool {
	if m != nil {
		return m.Likes
	}
	return false
}

func (m *RedditPostModel) GetNumComments() int32 {
	if m != nil {
		return m.NumComments
	}
	return 0
}

func (m *RedditPostModel) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RedditPostModel) GetReplies() []*Comment {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (m *RedditPostModel) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RedditPostModel) GetSubredditID() string {
	if m != nil {
		return m.SubredditID
	}
	return ""
}

func (m *RedditPostModel) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *RedditPostModel) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *RedditPostModel) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *RedditPostModel) GetGilded() int32 {
	if m != nil {
		return m.Gilded
	}
	return 0
}

func (m *RedditPostModel) GetDistinguished() string {
	if m != nil {
		return m.Distinguished
	}
	return ""
}

func (m *RedditPostModel) GetStickied() bool {
	if m != nil {
		return m.Stickied
	}
	return false
}

func (m *RedditPostModel) GetIsRedditMediaDomain() bool {
	if m != nil {
		return m.IsRedditMediaDomain
	}
	return false
}

func (m *RedditPostModel) GetCommentCountSnapshot() []*CommentCountTimeSnapshot {
	if m != nil {
		return m.CommentCountSnapshot
	}
	return nil
}

func (m *RedditPostModel) GetHotRate() float64 {
	if m != nil {
		return m.HotRate
	}
	return 0
}

func (m *RedditPostModel) GetSubreddit() string {
	if m != nil {
		return m.Subreddit
	}
	return ""
}

func (m *RedditPostModel) GetIsSelf() bool {
	if m != nil {
		return m.IsSelf
	}
	return false
}

//*
//TODO
type RedditPost struct {
	Base      *BaseModel      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment *SentimentModel `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	// named entities from content
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// named entities from title
	TitleData *NamedEntitiesModel `protobuf:"bytes,4,opt,name=title_data,json=titleData,proto3" json:"title_data,omitempty"`
	// data from original reddit post
	RedditPost           *RedditPostModel `protobuf:"bytes,5,opt,name=reddit_post,json=redditPost,proto3" json:"reddit_post,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RedditPost) Reset()         { *m = RedditPost{} }
func (m *RedditPost) String() string { return proto.CompactTextString(m) }
func (*RedditPost) ProtoMessage()    {}
func (*RedditPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{18}
}

func (m *RedditPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedditPost.Unmarshal(m, b)
}
func (m *RedditPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedditPost.Marshal(b, m, deterministic)
}
func (m *RedditPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedditPost.Merge(m, src)
}
func (m *RedditPost) XXX_Size() int {
	return xxx_messageInfo_RedditPost.Size(m)
}
func (m *RedditPost) XXX_DiscardUnknown() {
	xxx_messageInfo_RedditPost.DiscardUnknown(m)
}

var xxx_messageInfo_RedditPost proto.InternalMessageInfo

func (m *RedditPost) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RedditPost) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *RedditPost) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *RedditPost) GetTitleData() *NamedEntitiesModel {
	if m != nil {
		return m.TitleData
	}
	return nil
}

func (m *RedditPost) GetRedditPost() *RedditPostModel {
	if m != nil {
		return m.RedditPost
	}
	return nil
}

//*
//Stores some useful data form original tweet
type ExtendedTweet struct {
	FavouriteCount            int32    `protobuf:"varint,1,opt,name=favourite_count,json=favouriteCount,proto3" json:"favourite_count,omitempty"`
	FilterLevel               string   `protobuf:"bytes,2,opt,name=filter_level,json=filterLevel,proto3" json:"filter_level,omitempty"`
	IdStr                     string   `protobuf:"bytes,3,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	InReplyToScreenName       string   `protobuf:"bytes,4,opt,name=in_reply_to_screen_name,json=inReplyToScreenName,proto3" json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusIdStr      string   `protobuf:"bytes,5,opt,name=in_reply_to_status_id_str,json=inReplyToStatusIdStr,proto3" json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserIdStr        string   `protobuf:"bytes,6,opt,name=in_reply_to_user_id_str,json=inReplyToUserIdStr,proto3" json:"in_reply_to_user_id_str,omitempty"`
	IsQuoteStatus             string   `protobuf:"bytes,7,opt,name=is_quote_status,json=isQuoteStatus,proto3" json:"is_quote_status,omitempty"`
	Lang                      string   `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`
	PossiblySensitive         bool     `protobuf:"varint,9,opt,name=possibly_sensitive,json=possiblySensitive,proto3" json:"possibly_sensitive,omitempty"`
	QuoteCount                int32    `protobuf:"varint,10,opt,name=quote_count,json=quoteCount,proto3" json:"quote_count,omitempty"`
	ReplyCount                int32    `protobuf:"varint,11,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	RetweetCount              int32    `protobuf:"varint,12,opt,name=retweet_count,json=retweetCount,proto3" json:"retweet_count,omitempty"`
	UserMentions              []string `protobuf:"bytes,13,rep,name=user_mentions,json=userMentions,proto3" json:"user_mentions,omitempty"`
	Source                    string   `protobuf:"bytes,14,opt,name=source,proto3" json:"source,omitempty"`
	AuthorCreatedAt           string   `protobuf:"bytes,15,opt,name=author_created_at,json=authorCreatedAt,proto3" json:"author_created_at,omitempty"`
	AuthorDefaultProfile      bool     `protobuf:"varint,16,opt,name=author_default_profile,json=authorDefaultProfile,proto3" json:"author_default_profile,omitempty"`
	AuthorDefaultProfileImage bool     `protobuf:"varint,17,opt,name=author_default_profile_image,json=authorDefaultProfileImage,proto3" json:"author_default_profile_image,omitempty"`
	AuthorFollowersCount      int32    `protobuf:"varint,18,opt,name=author_followers_count,json=authorFollowersCount,proto3" json:"author_followers_count,omitempty"`
	AuthorFriendsCount        int32    `protobuf:"varint,19,opt,name=author_friends_count,json=authorFriendsCount,proto3" json:"author_friends_count,omitempty"`
	AuthorIdStr               string   `protobuf:"bytes,20,opt,name=author_id_str,json=authorIdStr,proto3" json:"author_id_str,omitempty"`
	AuthorLang                string   `protobuf:"bytes,21,opt,name=author_lang,json=authorLang,proto3" json:"author_lang,omitempty"`
	AuthorLocation            string   `protobuf:"bytes,22,opt,name=author_location,json=authorLocation,proto3" json:"author_location,omitempty"`
	AuthorName                string   `protobuf:"bytes,23,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorScreenName          string   `protobuf:"bytes,24,opt,name=author_screen_name,json=authorScreenName,proto3" json:"author_screen_name,omitempty"`
	AuthorProfileImageUrlHttp string   `protobuf:"bytes,25,opt,name=author_profile_image_url_http,json=authorProfileImageUrlHttp,proto3" json:"author_profile_image_url_http,omitempty"`
	AuthorStatusesCount       int32    `protobuf:"varint,26,opt,name=author_statuses_count,json=authorStatusesCount,proto3" json:"author_statuses_count,omitempty"`
	Categories                []string `protobuf:"bytes,27,rep,name=categories,proto3" json:"categories,omitempty"`
	Truncated                 bool     `protobuf:"varint,28,opt,name=truncated,proto3" json:"truncated,omitempty"`
	FullText                  string   `protobuf:"bytes,29,opt,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *ExtendedTweet) Reset()         { *m = ExtendedTweet{} }
func (m *ExtendedTweet) String() string { return proto.CompactTextString(m) }
func (*ExtendedTweet) ProtoMessage()    {}
func (*ExtendedTweet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{19}
}

func (m *ExtendedTweet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendedTweet.Unmarshal(m, b)
}
func (m *ExtendedTweet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendedTweet.Marshal(b, m, deterministic)
}
func (m *ExtendedTweet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedTweet.Merge(m, src)
}
func (m *ExtendedTweet) XXX_Size() int {
	return xxx_messageInfo_ExtendedTweet.Size(m)
}
func (m *ExtendedTweet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedTweet.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedTweet proto.InternalMessageInfo

func (m *ExtendedTweet) GetFavouriteCount() int32 {
	if m != nil {
		return m.FavouriteCount
	}
	return 0
}

func (m *ExtendedTweet) GetFilterLevel() string {
	if m != nil {
		return m.FilterLevel
	}
	return ""
}

func (m *ExtendedTweet) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToScreenName() string {
	if m != nil {
		return m.InReplyToScreenName
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToStatusIdStr() string {
	if m != nil {
		return m.InReplyToStatusIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToUserIdStr() string {
	if m != nil {
		return m.InReplyToUserIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetIsQuoteStatus() string {
	if m != nil {
		return m.IsQuoteStatus
	}
	return ""
}

func (m *ExtendedTweet) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ExtendedTweet) GetPossiblySensitive() bool {
	if m != nil {
		return m.PossiblySensitive
	}
	return false
}

func (m *ExtendedTweet) GetQuoteCount() int32 {
	if m != nil {
		return m.QuoteCount
	}
	return 0
}

func (m *ExtendedTweet) GetReplyCount() int32 {
	if m != nil {
		return m.ReplyCount
	}
	return 0
}

func (m *ExtendedTweet) GetRetweetCount() int32 {
	if m != nil {
		return m.RetweetCount
	}
	return 0
}

func (m *ExtendedTweet) GetUserMentions() []string {
	if m != nil {
		return m.UserMentions
	}
	return nil
}

func (m *ExtendedTweet) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorCreatedAt() string {
	if m != nil {
		return m.AuthorCreatedAt
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorDefaultProfile() bool {
	if m != nil {
		return m.AuthorDefaultProfile
	}
	return false
}

func (m *ExtendedTweet) GetAuthorDefaultProfileImage() bool {
	if m != nil {
		return m.AuthorDefaultProfileImage
	}
	return false
}

func (m *ExtendedTweet) GetAuthorFollowersCount() int32 {
	if m != nil {
		return m.AuthorFollowersCount
	}
	return 0
}

func (m *ExtendedTweet) GetAuthorFriendsCount() int32 {
	if m != nil {
		return m.AuthorFriendsCount
	}
	return 0
}

func (m *ExtendedTweet) GetAuthorIdStr() string {
	if m != nil {
		return m.AuthorIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorLang() string {
	if m != nil {
		return m.AuthorLang
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorLocation() string {
	if m != nil {
		return m.AuthorLocation
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorScreenName() string {
	if m != nil {
		return m.AuthorScreenName
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorProfileImageUrlHttp() string {
	if m != nil {
		return m.AuthorProfileImageUrlHttp
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorStatusesCount() int32 {
	if m != nil {
		return m.AuthorStatusesCount
	}
	return 0
}

func (m *ExtendedTweet) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *ExtendedTweet) GetTruncated() bool {
	if m != nil {
		return m.Truncated
	}
	return false
}

func (m *ExtendedTweet) GetFullText() string {
	if m != nil {
		return m.FullText
	}
	return ""
}

//*
//TODO
type Tweet struct {
	Base          *BaseModel          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment     *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// data from original tweet
	ExtendedTweet        *ExtendedTweet `protobuf:"bytes,4,opt,name=extended_tweet,json=extendedTweet,proto3" json:"extended_tweet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Tweet) Reset()         { *m = Tweet{} }
func (m *Tweet) String() string { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()    {}
func (*Tweet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{20}
}

func (m *Tweet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tweet.Unmarshal(m, b)
}
func (m *Tweet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tweet.Marshal(b, m, deterministic)
}
func (m *Tweet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tweet.Merge(m, src)
}
func (m *Tweet) XXX_Size() int {
	return xxx_messageInfo_Tweet.Size(m)
}
func (m *Tweet) XXX_DiscardUnknown() {
	xxx_messageInfo_Tweet.DiscardUnknown(m)
}

var xxx_messageInfo_Tweet proto.InternalMessageInfo

func (m *Tweet) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Tweet) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Tweet) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *Tweet) GetExtendedTweet() *ExtendedTweet {
	if m != nil {
		return m.ExtendedTweet
	}
	return nil
}

type TimelineData struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	FormattedTime        string   `protobuf:"bytes,2,opt,name=formatted_time,json=formattedTime,proto3" json:"formatted_time,omitempty"`
	Value                []int32  `protobuf:"varint,3,rep,packed,name=value,proto3" json:"value,omitempty"`
	FormattedValue       []string `protobuf:"bytes,4,rep,name=formatted_value,json=formattedValue,proto3" json:"formatted_value,omitempty"`
	KeywordsTotalValue   int32    `protobuf:"varint,5,opt,name=keywords_total_value,json=keywordsTotalValue,proto3" json:"keywords_total_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimelineData) Reset()         { *m = TimelineData{} }
func (m *TimelineData) String() string { return proto.CompactTextString(m) }
func (*TimelineData) ProtoMessage()    {}
func (*TimelineData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{21}
}

func (m *TimelineData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimelineData.Unmarshal(m, b)
}
func (m *TimelineData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimelineData.Marshal(b, m, deterministic)
}
func (m *TimelineData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimelineData.Merge(m, src)
}
func (m *TimelineData) XXX_Size() int {
	return xxx_messageInfo_TimelineData.Size(m)
}
func (m *TimelineData) XXX_DiscardUnknown() {
	xxx_messageInfo_TimelineData.DiscardUnknown(m)
}

var xxx_messageInfo_TimelineData proto.InternalMessageInfo

func (m *TimelineData) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *TimelineData) GetFormattedTime() string {
	if m != nil {
		return m.FormattedTime
	}
	return ""
}

func (m *TimelineData) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TimelineData) GetFormattedValue() []string {
	if m != nil {
		return m.FormattedValue
	}
	return nil
}

func (m *TimelineData) GetKeywordsTotalValue() int32 {
	if m != nil {
		return m.KeywordsTotalValue
	}
	return 0
}

type GoogleTrendsUpdate struct {
	Base                 *BaseModel          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment            *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	NamedEntities        *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	TimelineData         []*TimelineData     `protobuf:"bytes,4,rep,name=timeline_data,json=timelineData,proto3" json:"timeline_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GoogleTrendsUpdate) Reset()         { *m = GoogleTrendsUpdate{} }
func (m *GoogleTrendsUpdate) String() string { return proto.CompactTextString(m) }
func (*GoogleTrendsUpdate) ProtoMessage()    {}
func (*GoogleTrendsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{22}
}

func (m *GoogleTrendsUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleTrendsUpdate.Unmarshal(m, b)
}
func (m *GoogleTrendsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleTrendsUpdate.Marshal(b, m, deterministic)
}
func (m *GoogleTrendsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleTrendsUpdate.Merge(m, src)
}
func (m *GoogleTrendsUpdate) XXX_Size() int {
	return xxx_messageInfo_GoogleTrendsUpdate.Size(m)
}
func (m *GoogleTrendsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleTrendsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleTrendsUpdate proto.InternalMessageInfo

func (m *GoogleTrendsUpdate) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GoogleTrendsUpdate) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *GoogleTrendsUpdate) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *GoogleTrendsUpdate) GetTimelineData() []*TimelineData {
	if m != nil {
		return m.TimelineData
	}
	return nil
}

// VIDEO
type ChannelLocalization struct {
	Description          string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ForceSendFields      []string `protobuf:"bytes,3,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields           []string `protobuf:"bytes,4,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelLocalization) Reset()         { *m = ChannelLocalization{} }
func (m *ChannelLocalization) String() string { return proto.CompactTextString(m) }
func (*ChannelLocalization) ProtoMessage()    {}
func (*ChannelLocalization) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{23}
}

func (m *ChannelLocalization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelLocalization.Unmarshal(m, b)
}
func (m *ChannelLocalization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelLocalization.Marshal(b, m, deterministic)
}
func (m *ChannelLocalization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelLocalization.Merge(m, src)
}
func (m *ChannelLocalization) XXX_Size() int {
	return xxx_messageInfo_ChannelLocalization.Size(m)
}
func (m *ChannelLocalization) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelLocalization.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelLocalization proto.InternalMessageInfo

func (m *ChannelLocalization) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChannelLocalization) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelLocalization) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *ChannelLocalization) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type Thumbnail struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Width                int64    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	ForceSendFields      []string `protobuf:"bytes,4,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields           []string `protobuf:"bytes,5,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thumbnail) Reset()         { *m = Thumbnail{} }
func (m *Thumbnail) String() string { return proto.CompactTextString(m) }
func (*Thumbnail) ProtoMessage()    {}
func (*Thumbnail) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{24}
}

func (m *Thumbnail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thumbnail.Unmarshal(m, b)
}
func (m *Thumbnail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thumbnail.Marshal(b, m, deterministic)
}
func (m *Thumbnail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thumbnail.Merge(m, src)
}
func (m *Thumbnail) XXX_Size() int {
	return xxx_messageInfo_Thumbnail.Size(m)
}
func (m *Thumbnail) XXX_DiscardUnknown() {
	xxx_messageInfo_Thumbnail.DiscardUnknown(m)
}

var xxx_messageInfo_Thumbnail proto.InternalMessageInfo

func (m *Thumbnail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Thumbnail) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Thumbnail) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Thumbnail) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *Thumbnail) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type ThumbnailDetails struct {
	Default              *Thumbnail `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	High                 *Thumbnail `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	Maxres               *Thumbnail `protobuf:"bytes,3,opt,name=maxres,proto3" json:"maxres,omitempty"`
	Medium               *Thumbnail `protobuf:"bytes,4,opt,name=medium,proto3" json:"medium,omitempty"`
	Standard             *Thumbnail `protobuf:"bytes,5,opt,name=standard,proto3" json:"standard,omitempty"`
	ForceSendFields      []string   `protobuf:"bytes,6,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields           []string   `protobuf:"bytes,7,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ThumbnailDetails) Reset()         { *m = ThumbnailDetails{} }
func (m *ThumbnailDetails) String() string { return proto.CompactTextString(m) }
func (*ThumbnailDetails) ProtoMessage()    {}
func (*ThumbnailDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{25}
}

func (m *ThumbnailDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThumbnailDetails.Unmarshal(m, b)
}
func (m *ThumbnailDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThumbnailDetails.Marshal(b, m, deterministic)
}
func (m *ThumbnailDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbnailDetails.Merge(m, src)
}
func (m *ThumbnailDetails) XXX_Size() int {
	return xxx_messageInfo_ThumbnailDetails.Size(m)
}
func (m *ThumbnailDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbnailDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbnailDetails proto.InternalMessageInfo

func (m *ThumbnailDetails) GetDefault() *Thumbnail {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *ThumbnailDetails) GetHigh() *Thumbnail {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *ThumbnailDetails) GetMaxres() *Thumbnail {
	if m != nil {
		return m.Maxres
	}
	return nil
}

func (m *ThumbnailDetails) GetMedium() *Thumbnail {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (m *ThumbnailDetails) GetStandard() *Thumbnail {
	if m != nil {
		return m.Standard
	}
	return nil
}

func (m *ThumbnailDetails) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *ThumbnailDetails) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type ChannelSnippet struct {
	Country              string               `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	CustomUrl            string               `protobuf:"bytes,2,opt,name=custom_url,json=customUrl,proto3" json:"custom_url,omitempty"`
	DefaultLanguage      string               `protobuf:"bytes,3,opt,name=default_language,json=defaultLanguage,proto3" json:"default_language,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Localized            *ChannelLocalization `protobuf:"bytes,5,opt,name=localized,proto3" json:"localized,omitempty"`
	PublishedAt          string               `protobuf:"bytes,6,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Thumbnails           *ThumbnailDetails    `protobuf:"bytes,7,opt,name=thumbnails,proto3" json:"thumbnails,omitempty"`
	Title                string               `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	ForceSendFields      []string             `protobuf:"bytes,9,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields           []string             `protobuf:"bytes,10,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChannelSnippet) Reset()         { *m = ChannelSnippet{} }
func (m *ChannelSnippet) String() string { return proto.CompactTextString(m) }
func (*ChannelSnippet) ProtoMessage()    {}
func (*ChannelSnippet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{26}
}

func (m *ChannelSnippet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelSnippet.Unmarshal(m, b)
}
func (m *ChannelSnippet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelSnippet.Marshal(b, m, deterministic)
}
func (m *ChannelSnippet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSnippet.Merge(m, src)
}
func (m *ChannelSnippet) XXX_Size() int {
	return xxx_messageInfo_ChannelSnippet.Size(m)
}
func (m *ChannelSnippet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSnippet.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSnippet proto.InternalMessageInfo

func (m *ChannelSnippet) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ChannelSnippet) GetCustomUrl() string {
	if m != nil {
		return m.CustomUrl
	}
	return ""
}

func (m *ChannelSnippet) GetDefaultLanguage() string {
	if m != nil {
		return m.DefaultLanguage
	}
	return ""
}

func (m *ChannelSnippet) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChannelSnippet) GetLocalized() *ChannelLocalization {
	if m != nil {
		return m.Localized
	}
	return nil
}

func (m *ChannelSnippet) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *ChannelSnippet) GetThumbnails() *ThumbnailDetails {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func (m *ChannelSnippet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChannelSnippet) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *ChannelSnippet) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type ChannelStatistics struct {
	CommentCount          uint64   `protobuf:"varint,1,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	HiddenSubscriberCount bool     `protobuf:"varint,2,opt,name=hidden_subscriber_count,json=hiddenSubscriberCount,proto3" json:"hidden_subscriber_count,omitempty"`
	SubscriberCount       uint64   `protobuf:"varint,3,opt,name=subscriber_count,json=subscriberCount,proto3" json:"subscriber_count,omitempty"`
	VideoCount            uint64   `protobuf:"varint,4,opt,name=video_count,json=videoCount,proto3" json:"video_count,omitempty"`
	ViewCount             uint64   `protobuf:"varint,5,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	ForceSendFields       []string `protobuf:"bytes,9,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields            []string `protobuf:"bytes,10,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ChannelStatistics) Reset()         { *m = ChannelStatistics{} }
func (m *ChannelStatistics) String() string { return proto.CompactTextString(m) }
func (*ChannelStatistics) ProtoMessage()    {}
func (*ChannelStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{27}
}

func (m *ChannelStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelStatistics.Unmarshal(m, b)
}
func (m *ChannelStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelStatistics.Marshal(b, m, deterministic)
}
func (m *ChannelStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStatistics.Merge(m, src)
}
func (m *ChannelStatistics) XXX_Size() int {
	return xxx_messageInfo_ChannelStatistics.Size(m)
}
func (m *ChannelStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStatistics proto.InternalMessageInfo

func (m *ChannelStatistics) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *ChannelStatistics) GetHiddenSubscriberCount() bool {
	if m != nil {
		return m.HiddenSubscriberCount
	}
	return false
}

func (m *ChannelStatistics) GetSubscriberCount() uint64 {
	if m != nil {
		return m.SubscriberCount
	}
	return 0
}

func (m *ChannelStatistics) GetVideoCount() uint64 {
	if m != nil {
		return m.VideoCount
	}
	return 0
}

func (m *ChannelStatistics) GetViewCount() uint64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *ChannelStatistics) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *ChannelStatistics) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type VideoStatistics struct {
	CommentCount         uint64   `protobuf:"varint,1,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	DislikeCount         uint64   `protobuf:"varint,2,opt,name=dislike_count,json=dislikeCount,proto3" json:"dislike_count,omitempty"`
	FavoriteCount        uint64   `protobuf:"varint,3,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	LikeCount            uint64   `protobuf:"varint,4,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ViewCount            uint64   `protobuf:"varint,5,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	ForceSendFields      []string `protobuf:"bytes,9,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	NullFields           []string `protobuf:"bytes,10,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoStatistics) Reset()         { *m = VideoStatistics{} }
func (m *VideoStatistics) String() string { return proto.CompactTextString(m) }
func (*VideoStatistics) ProtoMessage()    {}
func (*VideoStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{28}
}

func (m *VideoStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoStatistics.Unmarshal(m, b)
}
func (m *VideoStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoStatistics.Marshal(b, m, deterministic)
}
func (m *VideoStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoStatistics.Merge(m, src)
}
func (m *VideoStatistics) XXX_Size() int {
	return xxx_messageInfo_VideoStatistics.Size(m)
}
func (m *VideoStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_VideoStatistics proto.InternalMessageInfo

func (m *VideoStatistics) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *VideoStatistics) GetDislikeCount() uint64 {
	if m != nil {
		return m.DislikeCount
	}
	return 0
}

func (m *VideoStatistics) GetFavoriteCount() uint64 {
	if m != nil {
		return m.FavoriteCount
	}
	return 0
}

func (m *VideoStatistics) GetLikeCount() uint64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *VideoStatistics) GetViewCount() uint64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *VideoStatistics) GetForceSendFields() []string {
	if m != nil {
		return m.ForceSendFields
	}
	return nil
}

func (m *VideoStatistics) GetNullFields() []string {
	if m != nil {
		return m.NullFields
	}
	return nil
}

type Video struct {
	Mentions             []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Trend                float32                `protobuf:"fixed32,2,opt,name=trend,proto3" json:"trend,omitempty"`
	Channel              *ChannelSnippet        `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelStatistics    *ChannelStatistics     `protobuf:"bytes,4,opt,name=channel_statistics,json=channelStatistics,proto3" json:"channel_statistics,omitempty"`
	Statistics           *VideoStatistics       `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Base                 *BaseModel             `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment            *SentimentModel        `protobuf:"bytes,7,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	NamedEntities        *NamedEntitiesModel    `protobuf:"bytes,8,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{29}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetMentions() []*timestamp.Timestamp {
	if m != nil {
		return m.Mentions
	}
	return nil
}

func (m *Video) GetTrend() float32 {
	if m != nil {
		return m.Trend
	}
	return 0
}

func (m *Video) GetChannel() *ChannelSnippet {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *Video) GetChannelStatistics() *ChannelStatistics {
	if m != nil {
		return m.ChannelStatistics
	}
	return nil
}

func (m *Video) GetStatistics() *VideoStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Video) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Video) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Video) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

//*
//Sentiment message holds informations about aggregated sentiment for specific time window.
//It is emitted every second for each asset and resolution. If your application needs to receive
//sentiment updates for only one specific asset, it need to be filtered on your side .
type SentimentCandle struct {
	// unique identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// timestamp representing start of the time frame
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// constant representing time frame width - M1 or H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// crypto asset
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// sum of all negative values
	NegativeSum float64 `protobuf:"fixed64,5,opt,name=negative_sum,json=negativeSum,proto3" json:"negative_sum,omitempty"`
	// counted negative occurrences
	NegativeCount int32 `protobuf:"varint,6,opt,name=negative_count,json=negativeCount,proto3" json:"negative_count,omitempty"`
	// sum of all positive values
	PositiveSum float64 `protobuf:"fixed64,7,opt,name=positive_sum,json=positiveSum,proto3" json:"positive_sum,omitempty"`
	// counted positive occurrences
	PositiveCount int32 `protobuf:"varint,8,opt,name=positive_count,json=positiveCount,proto3" json:"positive_count,omitempty"`
	// average of sentiments
	SentimentAvg float64 `protobuf:"fixed64,9,opt,name=sentiment_avg,json=sentimentAvg,proto3" json:"sentiment_avg,omitempty"`
	// value of sentiment at the start of candle
	OpenSentimentAverage float64 `protobuf:"fixed64,10,opt,name=open_sentiment_average,json=openSentimentAverage,proto3" json:"open_sentiment_average,omitempty"`
	// value of sentiment when the candle is highest
	HighSentimentAverage float64 `protobuf:"fixed64,11,opt,name=high_sentiment_average,json=highSentimentAverage,proto3" json:"high_sentiment_average,omitempty"`
	// value of sentiment when the candle is lowest
	LowSentimentAverage float64 `protobuf:"fixed64,12,opt,name=low_sentiment_average,json=lowSentimentAverage,proto3" json:"low_sentiment_average,omitempty"`
	// value of sentiment at the end of candle
	CloseSentimentAverage float64 `protobuf:"fixed64,13,opt,name=close_sentiment_average,json=closeSentimentAverage,proto3" json:"close_sentiment_average,omitempty"`
	// flag the signalizes that candle was updated
	Updated              bool     `protobuf:"varint,14,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentCandle) Reset()         { *m = SentimentCandle{} }
func (m *SentimentCandle) String() string { return proto.CompactTextString(m) }
func (*SentimentCandle) ProtoMessage()    {}
func (*SentimentCandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{30}
}

func (m *SentimentCandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentCandle.Unmarshal(m, b)
}
func (m *SentimentCandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentCandle.Marshal(b, m, deterministic)
}
func (m *SentimentCandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentCandle.Merge(m, src)
}
func (m *SentimentCandle) XXX_Size() int {
	return xxx_messageInfo_SentimentCandle.Size(m)
}
func (m *SentimentCandle) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentCandle.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentCandle proto.InternalMessageInfo

func (m *SentimentCandle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SentimentCandle) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *SentimentCandle) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentCandle) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *SentimentCandle) GetNegativeSum() float64 {
	if m != nil {
		return m.NegativeSum
	}
	return 0
}

func (m *SentimentCandle) GetNegativeCount() int32 {
	if m != nil {
		return m.NegativeCount
	}
	return 0
}

func (m *SentimentCandle) GetPositiveSum() float64 {
	if m != nil {
		return m.PositiveSum
	}
	return 0
}

func (m *SentimentCandle) GetPositiveCount() int32 {
	if m != nil {
		return m.PositiveCount
	}
	return 0
}

func (m *SentimentCandle) GetSentimentAvg() float64 {
	if m != nil {
		return m.SentimentAvg
	}
	return 0
}

func (m *SentimentCandle) GetOpenSentimentAverage() float64 {
	if m != nil {
		return m.OpenSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetHighSentimentAverage() float64 {
	if m != nil {
		return m.HighSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetLowSentimentAverage() float64 {
	if m != nil {
		return m.LowSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetCloseSentimentAverage() float64 {
	if m != nil {
		return m.CloseSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

//*
//Each request for historic data should be limited by date
type SentimentHistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// resolution for candle - M1/H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// name of the asset - ie. BTC
	Asset                string   `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentHistoricRequest) Reset()         { *m = SentimentHistoricRequest{} }
func (m *SentimentHistoricRequest) String() string { return proto.CompactTextString(m) }
func (*SentimentHistoricRequest) ProtoMessage()    {}
func (*SentimentHistoricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{31}
}

func (m *SentimentHistoricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentHistoricRequest.Unmarshal(m, b)
}
func (m *SentimentHistoricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentHistoricRequest.Marshal(b, m, deterministic)
}
func (m *SentimentHistoricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentHistoricRequest.Merge(m, src)
}
func (m *SentimentHistoricRequest) XXX_Size() int {
	return xxx_messageInfo_SentimentHistoricRequest.Size(m)
}
func (m *SentimentHistoricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentHistoricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentHistoricRequest proto.InternalMessageInfo

func (m *SentimentHistoricRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SentimentHistoricRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SentimentHistoricRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentHistoricRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

//*
//Each request for historic data should be limited by date
type HistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HistoricRequest) Reset()         { *m = HistoricRequest{} }
func (m *HistoricRequest) String() string { return proto.CompactTextString(m) }
func (*HistoricRequest) ProtoMessage()    {}
func (*HistoricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{32}
}

func (m *HistoricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricRequest.Unmarshal(m, b)
}
func (m *HistoricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricRequest.Marshal(b, m, deterministic)
}
func (m *HistoricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricRequest.Merge(m, src)
}
func (m *HistoricRequest) XXX_Size() int {
	return xxx_messageInfo_HistoricRequest.Size(m)
}
func (m *HistoricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricRequest proto.InternalMessageInfo

func (m *HistoricRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *HistoricRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

//*
//Wrapped historic data
type SentimentCandleItems struct {
	// array with candles
	Items                []*SentimentCandle `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SentimentCandleItems) Reset()         { *m = SentimentCandleItems{} }
func (m *SentimentCandleItems) String() string { return proto.CompactTextString(m) }
func (*SentimentCandleItems) ProtoMessage()    {}
func (*SentimentCandleItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{33}
}

func (m *SentimentCandleItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentCandleItems.Unmarshal(m, b)
}
func (m *SentimentCandleItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentCandleItems.Marshal(b, m, deterministic)
}
func (m *SentimentCandleItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentCandleItems.Merge(m, src)
}
func (m *SentimentCandleItems) XXX_Size() int {
	return xxx_messageInfo_SentimentCandleItems.Size(m)
}
func (m *SentimentCandleItems) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentCandleItems.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentCandleItems proto.InternalMessageInfo

func (m *SentimentCandleItems) GetItems() []*SentimentCandle {
	if m != nil {
		return m.Items
	}
	return nil
}

type TweetItems struct {
	// array with tweets
	Items                []*Tweet `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TweetItems) Reset()         { *m = TweetItems{} }
func (m *TweetItems) String() string { return proto.CompactTextString(m) }
func (*TweetItems) ProtoMessage()    {}
func (*TweetItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{34}
}

func (m *TweetItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TweetItems.Unmarshal(m, b)
}
func (m *TweetItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TweetItems.Marshal(b, m, deterministic)
}
func (m *TweetItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TweetItems.Merge(m, src)
}
func (m *TweetItems) XXX_Size() int {
	return xxx_messageInfo_TweetItems.Size(m)
}
func (m *TweetItems) XXX_DiscardUnknown() {
	xxx_messageInfo_TweetItems.DiscardUnknown(m)
}

var xxx_messageInfo_TweetItems proto.InternalMessageInfo

func (m *TweetItems) GetItems() []*Tweet {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleItems struct {
	// array with articles
	Items                []*Article `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArticleItems) Reset()         { *m = ArticleItems{} }
func (m *ArticleItems) String() string { return proto.CompactTextString(m) }
func (*ArticleItems) ProtoMessage()    {}
func (*ArticleItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{35}
}

func (m *ArticleItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleItems.Unmarshal(m, b)
}
func (m *ArticleItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleItems.Marshal(b, m, deterministic)
}
func (m *ArticleItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleItems.Merge(m, src)
}
func (m *ArticleItems) XXX_Size() int {
	return xxx_messageInfo_ArticleItems.Size(m)
}
func (m *ArticleItems) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleItems.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleItems proto.InternalMessageInfo

func (m *ArticleItems) GetItems() []*Article {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterEnum("NamedEntity", NamedEntity_name, NamedEntity_value)
	proto.RegisterType((*BaseModel)(nil), "BaseModel")
	proto.RegisterType((*SentimentModel)(nil), "SentimentModel")
	proto.RegisterType((*CryptopanicEntrySource)(nil), "CryptopanicEntrySource")
	proto.RegisterType((*CryptopanicEntryVotes)(nil), "CryptopanicEntryVotes")
	proto.RegisterType((*CryptopanicEntryMetadata)(nil), "CryptopanicEntryMetadata")
	proto.RegisterType((*CryptopanicRawEntry)(nil), "CryptopanicRawEntry")
	proto.RegisterType((*CryptopanicFeed)(nil), "CryptopanicFeed")
	proto.RegisterType((*CryptopanicPost)(nil), "CryptopanicPost")
	proto.RegisterType((*NamedEntityOccurrence)(nil), "NamedEntityOccurrence")
	proto.RegisterType((*NamedEntitiesModel)(nil), "NamedEntitiesModel")
	proto.RegisterMapType((map[string]int32)(nil), "NamedEntitiesModel.AssetMentionsEntry")
	proto.RegisterType((*Article)(nil), "Article")
	proto.RegisterType((*UserMessage)(nil), "UserMessage")
	proto.RegisterType((*BitmexUserMessage)(nil), "BitmexUserMessage")
	proto.RegisterType((*TelegramUserMessage)(nil), "TelegramUserMessage")
	proto.RegisterType((*DiscordUserMessage)(nil), "DiscordUserMessage")
	proto.RegisterType((*CommentCountTimeSnapshot)(nil), "CommentCountTimeSnapshot")
	proto.RegisterType((*Comment)(nil), "Comment")
	proto.RegisterType((*RedditPostModel)(nil), "RedditPostModel")
	proto.RegisterType((*RedditPost)(nil), "RedditPost")
	proto.RegisterType((*ExtendedTweet)(nil), "ExtendedTweet")
	proto.RegisterType((*Tweet)(nil), "Tweet")
	proto.RegisterType((*TimelineData)(nil), "TimelineData")
	proto.RegisterType((*GoogleTrendsUpdate)(nil), "GoogleTrendsUpdate")
	proto.RegisterType((*ChannelLocalization)(nil), "ChannelLocalization")
	proto.RegisterType((*Thumbnail)(nil), "Thumbnail")
	proto.RegisterType((*ThumbnailDetails)(nil), "ThumbnailDetails")
	proto.RegisterType((*ChannelSnippet)(nil), "ChannelSnippet")
	proto.RegisterType((*ChannelStatistics)(nil), "ChannelStatistics")
	proto.RegisterType((*VideoStatistics)(nil), "VideoStatistics")
	proto.RegisterType((*Video)(nil), "Video")
	proto.RegisterType((*SentimentCandle)(nil), "SentimentCandle")
	proto.RegisterType((*SentimentHistoricRequest)(nil), "SentimentHistoricRequest")
	proto.RegisterType((*HistoricRequest)(nil), "HistoricRequest")
	proto.RegisterType((*SentimentCandleItems)(nil), "SentimentCandleItems")
	proto.RegisterType((*TweetItems)(nil), "TweetItems")
	proto.RegisterType((*ArticleItems)(nil), "ArticleItems")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 3569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3a, 0x4b, 0x6f, 0x1c, 0xc9,
	0x79, 0x9a, 0x17, 0x67, 0xe6, 0x9b, 0x17, 0x59, 0x7c, 0xb5, 0xb8, 0x0f, 0x69, 0x7b, 0xed, 0xf5,
	0xae, 0xe0, 0xed, 0xd5, 0x72, 0xe5, 0xcd, 0x66, 0x11, 0x24, 0xe6, 0x92, 0x94, 0x44, 0x44, 0x94,
	0x94, 0x1e, 0x6a, 0x13, 0xe7, 0xd2, 0x68, 0x4e, 0x17, 0x87, 0x05, 0xf5, 0x63, 0xdc, 0x55, 0xcd,
	0x87, 0x2f, 0x0e, 0x90, 0x73, 0x72, 0x4a, 0x80, 0xc4, 0xc8, 0x0f, 0xc8, 0x21, 0xbf, 0x20, 0x40,
	0x92, 0x5b, 0x90, 0x9c, 0x73, 0xce, 0x25, 0x80, 0xff, 0x46, 0x10, 0x7c, 0x5f, 0x55, 0xf7, 0xf4,
	0x3c, 0x48, 0x2b, 0xb2, 0x61, 0xac, 0x6f, 0xf3, 0x3d, 0xab, 0xfa, 0x7b, 0x57, 0xd5, 0x40, 0x47,
	0x5d, 0x4f, 0xb8, 0x74, 0x26, 0x69, 0xa2, 0x92, 0x9d, 0x7b, 0xe3, 0x24, 0x19, 0x87, 0xfc, 0x33,
	0x82, 0x4e, 0xb3, 0xb3, 0xcf, 0x94, 0x88, 0xb8, 0x54, 0x7e, 0x34, 0x31, 0x0c, 0xef, 0xcc, 0x33,
	0xf0, 0x68, 0xa2, 0xae, 0x35, 0xd1, 0xfe, 0xeb, 0x1a, 0xb4, 0xbf, 0xf1, 0x25, 0x3f, 0x4e, 0x02,
	0x1e, 0xb2, 0x3e, 0x54, 0x45, 0x60, 0x55, 0xee, 0x57, 0x3e, 0x6e, 0xbb, 0x55, 0x11, 0xb0, 0x0d,
	0x68, 0x28, 0xa1, 0x42, 0x6e, 0x55, 0x09, 0xa5, 0x01, 0x66, 0x41, 0x73, 0x94, 0xc4, 0x8a, 0xc7,
	0xca, 0xaa, 0x11, 0x3e, 0x07, 0x89, 0x92, 0xfa, 0x97, 0x21, 0x4f, 0xad, 0xba, 0xa1, 0x68, 0x90,
	0xfd, 0x08, 0x5a, 0x93, 0xec, 0xd4, 0x0b, 0x7c, 0xc5, 0xad, 0xc6, 0xfd, 0xca, 0xc7, 0x9d, 0xdd,
	0x1d, 0x47, 0xef, 0xcb, 0xc9, 0xf7, 0xe5, 0x9c, 0xe4, 0x1b, 0x77, 0x9b, 0x93, 0xec, 0xf4, 0xc0,
	0x57, 0x9c, 0x3d, 0x42, 0x85, 0xdc, 0x57, 0x3c, 0xb0, 0x56, 0x7e, 0xb5, 0x94, 0x61, 0x65, 0x5b,
	0xb0, 0x22, 0x93, 0x2c, 0x1d, 0x71, 0xab, 0x49, 0xbb, 0x30, 0x10, 0x6e, 0x8f, 0x5f, 0x8d, 0x78,
	0x3a, 0x51, 0x56, 0x4b, 0x6f, 0xcf, 0x80, 0x28, 0x71, 0x21, 0x02, 0x9e, 0x48, 0xab, 0x7d, 0xbf,
	0x86, 0x12, 0x1a, 0x42, 0xbc, 0x88, 0xfc, 0x31, 0x97, 0x16, 0x68, 0xbc, 0x86, 0xd0, 0x30, 0xa1,
	0x88, 0x5f, 0x4b, 0xab, 0x43, 0x68, 0x0d, 0x20, 0xb7, 0x9f, 0xa9, 0xf3, 0x24, 0xb5, 0xba, 0x7a,
	0x5d, 0x0d, 0x31, 0x06, 0xf5, 0xd0, 0x8f, 0xc7, 0x56, 0x8f, 0xb0, 0xf4, 0x1b, 0x79, 0x2f, 0xb9,
	0x18, 0x9f, 0x2b, 0xab, 0x7f, 0xbf, 0xf2, 0x71, 0xc5, 0x35, 0x90, 0x3d, 0x84, 0xfe, 0x90, 0xc7,
	0xe8, 0xc3, 0x58, 0x69, 0xa7, 0xbc, 0x0b, 0x6d, 0x99, 0x63, 0xc8, 0x37, 0x15, 0x77, 0x8a, 0x60,
	0x1f, 0x42, 0x2f, 0xf2, 0xd3, 0xd7, 0x5c, 0x79, 0x22, 0x9a, 0xf8, 0x23, 0x45, 0xae, 0xaa, 0xb8,
	0x5d, 0x8d, 0x3c, 0x22, 0x9c, 0x9d, 0xc2, 0xd6, 0x7e, 0x7a, 0x3d, 0x51, 0xc9, 0xc4, 0x8f, 0xc5,
	0xe8, 0x30, 0x56, 0xe9, 0xf5, 0x50, 0x9b, 0xa4, 0xf0, 0x70, 0xa5, 0xec, 0xe1, 0x2d, 0x58, 0x49,
	0xf9, 0x58, 0x24, 0xb1, 0x71, 0xbc, 0x81, 0x10, 0x1f, 0x24, 0x91, 0x2f, 0x62, 0xe3, 0x78, 0x03,
	0xe1, 0x07, 0x4e, 0x7c, 0x75, 0x6e, 0x9c, 0x4e, 0xbf, 0xed, 0xff, 0xae, 0xc0, 0xe6, 0xfc, 0xa2,
	0xdf, 0x26, 0x8a, 0x4b, 0xb6, 0x03, 0xad, 0x98, 0x8f, 0x7d, 0x25, 0x2e, 0xf4, 0xb2, 0x0d, 0xb7,
	0x80, 0x91, 0x36, 0x49, 0xa4, 0x20, 0x5a, 0x55, 0xd3, 0x72, 0x18, 0x0d, 0x21, 0xa2, 0x49, 0x92,
	0x2a, 0xdf, 0x44, 0x5e, 0xc3, 0x9d, 0x22, 0xb4, 0x4b, 0x5e, 0xf3, 0x80, 0x36, 0xd1, 0x70, 0x35,
	0x80, 0xfa, 0x02, 0x21, 0x35, 0xa1, 0xa1, 0xf5, 0xe5, 0x30, 0x5b, 0x85, 0x5a, 0x98, 0x84, 0x14,
	0x58, 0x0d, 0x17, 0x7f, 0x92, 0x35, 0x92, 0x2b, 0x31, 0xa2, 0xb8, 0x69, 0xb8, 0x1a, 0x40, 0xac,
	0xf4, 0x2f, 0x78, 0x40, 0x41, 0xd3, 0x70, 0x35, 0x60, 0x7f, 0x0b, 0xd6, 0xfc, 0xe7, 0x1d, 0x73,
	0xe5, 0x07, 0xbe, 0xf2, 0x31, 0xd0, 0x22, 0x2e, 0xa5, 0x3f, 0xce, 0xed, 0x9a, 0x83, 0xec, 0x3e,
	0x74, 0x02, 0x2e, 0x47, 0xa9, 0x98, 0xa8, 0xa9, 0x79, 0xcb, 0x28, 0xfb, 0x97, 0x55, 0x58, 0x2f,
	0x29, 0x76, 0xfd, 0x4b, 0xd2, 0x8d, 0x36, 0x7e, 0x2d, 0xe2, 0x3c, 0x3b, 0xe9, 0x77, 0xc9, 0x1f,
	0xd5, 0x19, 0x7f, 0x7c, 0x56, 0x24, 0x40, 0x8d, 0xb2, 0x66, 0xdb, 0x59, 0xee, 0xfe, 0x22, 0x33,
	0x8a, 0x30, 0xa8, 0x97, 0xc3, 0xe0, 0x03, 0xe8, 0x4e, 0xb2, 0xd3, 0x50, 0xc8, 0x73, 0x1e, 0x78,
	0xbe, 0x22, 0x03, 0xb6, 0xdd, 0x4e, 0x81, 0xdb, 0x53, 0xb8, 0x2b, 0x19, 0x66, 0x63, 0x32, 0x62,
	0xdb, 0xa5, 0xdf, 0xa6, 0x8a, 0x68, 0x13, 0x62, 0x15, 0x59, 0x85, 0x5a, 0x96, 0x86, 0x26, 0xe5,
	0xf0, 0x27, 0x7b, 0x0f, 0xc0, 0xe4, 0x2a, 0xaa, 0x6d, 0x13, 0xa1, 0x6d, 0x30, 0x7b, 0x8a, 0xfd,
	0x10, 0x1a, 0x17, 0x18, 0x29, 0x16, 0xd0, 0xee, 0xb7, 0x9c, 0xa5, 0x71, 0xe4, 0x6a, 0x26, 0x2c,
	0x2d, 0x91, 0x31, 0xbc, 0xd5, 0x21, 0x81, 0xbb, 0xce, 0x4d, 0x9e, 0x71, 0x0b, 0x56, 0xfb, 0x4f,
	0x61, 0x50, 0xe2, 0x7a, 0xcc, 0x39, 0x95, 0xbb, 0x51, 0x92, 0x99, 0x2c, 0x6b, 0xb8, 0x1a, 0x60,
	0x0e, 0x34, 0x53, 0x2e, 0xb3, 0x50, 0x49, 0xab, 0x7a, 0xbf, 0xf6, 0x71, 0x67, 0x77, 0xc3, 0x59,
	0xe2, 0x1f, 0x37, 0x67, 0xb2, 0x7f, 0x3e, 0xa3, 0xf8, 0x65, 0x22, 0x15, 0x7b, 0x0a, 0x9b, 0xa3,
	0x29, 0xca, 0x4b, 0xfd, 0x4b, 0x8f, 0xa3, 0x10, 0x2d, 0x74, 0x93, 0xc2, 0xf5, 0xd1, 0x92, 0x28,
	0xb0, 0xa1, 0xe9, 0xa7, 0x4a, 0x8c, 0x4c, 0x4d, 0xee, 0xec, 0xb6, 0x9c, 0x3d, 0x0d, 0xbb, 0x39,
	0xc1, 0xbe, 0x84, 0xcd, 0xe7, 0x7e, 0xc4, 0x83, 0xc3, 0x58, 0x09, 0x75, 0xfd, 0x62, 0x34, 0xca,
	0xd2, 0x94, 0xc7, 0x23, 0xce, 0x6c, 0x68, 0x84, 0xfe, 0x29, 0x0f, 0x69, 0xd9, 0xfe, 0x6e, 0xd7,
	0x29, 0xb1, 0xb9, 0x9a, 0x44, 0xc1, 0xae, 0xfc, 0x54, 0xd7, 0x91, 0x9e, 0xab, 0x01, 0x74, 0x21,
	0x8f, 0x03, 0x8a, 0xa6, 0x9e, 0x8b, 0x3f, 0xd1, 0xf1, 0x8a, 0x5f, 0xa9, 0x3c, 0xe5, 0xf1, 0xb7,
	0xfd, 0x3f, 0x75, 0x60, 0x53, 0x95, 0x82, 0x4b, 0x5d, 0xc0, 0x2c, 0x68, 0xca, 0xeb, 0xe8, 0x34,
	0x09, 0xa5, 0x55, 0xa1, 0x72, 0x99, 0x83, 0xcc, 0x81, 0x15, 0x5f, 0x4a, 0x5e, 0x58, 0x76, 0xcb,
	0x59, 0xba, 0x71, 0xd7, 0x70, 0xb1, 0x87, 0xd0, 0x9c, 0xf0, 0x54, 0x26, 0xb1, 0xb4, 0x6a, 0xb7,
	0x0a, 0xe4, 0x6c, 0xec, 0x11, 0xb4, 0x47, 0x49, 0x84, 0x36, 0xe4, 0xd2, 0xaa, 0xdf, 0x2a, 0x33,
	0x65, 0x64, 0x7f, 0x00, 0xbd, 0x24, 0x1d, 0xfb, 0xb1, 0xf8, 0x99, 0x8f, 0x39, 0x29, 0xad, 0xc6,
	0xad, 0x92, 0xb3, 0xcc, 0xb8, 0x66, 0x98, 0x8c, 0x8c, 0xe4, 0xca, 0xed, 0x6b, 0x16, 0x8c, 0x28,
	0xc5, 0xaf, 0x46, 0xe7, 0x7e, 0x8c, 0xdd, 0xa6, 0x79, 0xbb, 0x54, 0xc1, 0xc8, 0x1e, 0x40, 0x3d,
	0x12, 0x72, 0x64, 0xb5, 0x6e, 0x15, 0x20, 0x1e, 0x72, 0x99, 0x3f, 0xce, 0x5b, 0x1c, 0xfd, 0x66,
	0xc7, 0xd0, 0x27, 0xdb, 0x7a, 0xd8, 0x4c, 0x68, 0xc3, 0x40, 0x9a, 0x3e, 0x72, 0x16, 0x1d, 0xe9,
	0xec, 0x21, 0xe7, 0xb1, 0x61, 0xd4, 0x41, 0xda, 0xf3, 0xcb, 0x38, 0x76, 0x0f, 0x3a, 0xba, 0xa2,
	0x78, 0x14, 0x1c, 0x1d, 0x0a, 0x0e, 0xd0, 0xa8, 0x13, 0x7e, 0xa5, 0x76, 0x7e, 0x0c, 0x6c, 0x51,
	0x0b, 0x86, 0xd7, 0x6b, 0x7e, 0x6d, 0x4a, 0x1b, 0xfe, 0xc4, 0x30, 0xbc, 0xf0, 0xc3, 0x2c, 0x6f,
	0x02, 0x1a, 0xf8, 0xba, 0xfa, 0x55, 0xc5, 0xfe, 0x8f, 0x0a, 0x34, 0x4d, 0xc8, 0xb3, 0xf7, 0xa1,
	0x7e, 0xea, 0x4b, 0x6e, 0xd2, 0x08, 0x9c, 0x62, 0x92, 0x71, 0x09, 0xcf, 0x3e, 0x2d, 0xb7, 0x4e,
	0x9d, 0x2f, 0x03, 0x67, 0xb6, 0xbd, 0x96, 0x7b, 0xe9, 0xd7, 0xd0, 0x8f, 0xf1, 0xab, 0x31, 0x39,
	0xe9, 0xb3, 0x4d, 0xf9, 0x5c, 0x5f, 0x62, 0x0c, 0xb7, 0x17, 0x97, 0x71, 0x6c, 0x17, 0x80, 0x8a,
	0xa6, 0x47, 0x75, 0xa8, 0x7e, 0xb3, 0x5c, 0x9b, 0xd8, 0x0e, 0xb0, 0x04, 0xfd, 0x7b, 0x05, 0x3a,
	0xaf, 0x24, 0x4f, 0x8f, 0x4d, 0x73, 0xf8, 0x0e, 0x7d, 0x0e, 0x83, 0x7a, 0x26, 0x8b, 0x31, 0x8e,
	0x7e, 0x97, 0xbb, 0x5a, 0x63, 0xa6, 0xab, 0xd9, 0x07, 0xb0, 0xf6, 0x8d, 0x50, 0x11, 0xbf, 0x2a,
	0x7f, 0xcd, 0x67, 0xd0, 0x45, 0x31, 0xaf, 0xdc, 0x09, 0x3b, 0xbb, 0x5d, 0xa7, 0xc4, 0xe3, 0x76,
	0xb2, 0x29, 0x60, 0xff, 0xb2, 0x02, 0xeb, 0x27, 0x3c, 0xe4, 0xe3, 0xd4, 0x8f, 0x7e, 0x1d, 0x45,
	0xec, 0xfb, 0xd0, 0x37, 0x15, 0xc6, 0x3b, 0xf5, 0x47, 0xaf, 0xb3, 0x09, 0x95, 0x97, 0xb6, 0xdb,
	0x33, 0xd8, 0x6f, 0x08, 0x49, 0x5d, 0xe8, 0xdc, 0x8f, 0x63, 0x1e, 0x7a, 0x22, 0xc8, 0x07, 0x0a,
	0x83, 0x39, 0x0a, 0xd8, 0x57, 0x60, 0xe5, 0x64, 0x99, 0x9d, 0x62, 0x83, 0x3e, 0xe5, 0xa9, 0xa7,
	0x1b, 0x84, 0x9e, 0x31, 0xb6, 0x0c, 0x7d, 0x58, 0x90, 0xf7, 0xa9, 0x63, 0xbc, 0x07, 0x60, 0xf6,
	0x8a, 0x8a, 0xd1, 0x56, 0x35, 0xb7, 0x6d, 0x30, 0x47, 0x81, 0xfd, 0x73, 0x60, 0x07, 0x42, 0x8e,
	0x92, 0x34, 0xf8, 0xb5, 0xbe, 0x72, 0x76, 0xfb, 0x55, 0xd3, 0x44, 0x8b, 0xed, 0xdf, 0x85, 0xd6,
	0x38, 0x13, 0x61, 0x90, 0x7f, 0x5b, 0xdb, 0x6d, 0x12, 0x7c, 0x14, 0xd8, 0x09, 0x58, 0xfb, 0x49,
	0x84, 0x31, 0x42, 0xfb, 0xc5, 0x09, 0x7a, 0x18, 0xfb, 0x13, 0x79, 0x9e, 0x60, 0xb7, 0xab, 0x63,
	0xf8, 0x98, 0xe5, 0x6f, 0x1b, 0xb7, 0x89, 0x0f, 0xe7, 0xcf, 0x91, 0xd6, 0x65, 0x4c, 0xa3, 0x13,
	0xb6, 0x3b, 0x2a, 0x2d, 0x60, 0xff, 0x7d, 0x15, 0x9a, 0x66, 0x45, 0x9c, 0x0e, 0x8e, 0x0e, 0x8a,
	0x33, 0xc6, 0x01, 0x46, 0x1a, 0x86, 0x9e, 0xf9, 0x00, 0xfa, 0x8d, 0x93, 0xde, 0x84, 0xa7, 0x91,
	0x8f, 0x63, 0xb5, 0xd9, 0xfc, 0x14, 0xc1, 0xde, 0x2f, 0xa6, 0x87, 0x57, 0x27, 0xfb, 0xe4, 0x8a,
	0xba, 0x5b, 0xc2, 0x60, 0x9c, 0x06, 0x3c, 0xe4, 0xca, 0x8c, 0x7c, 0x2d, 0x37, 0x07, 0x69, 0x12,
	0x99, 0x48, 0x9a, 0xb8, 0x1b, 0x2e, 0xfe, 0xc4, 0x3a, 0x13, 0x24, 0x97, 0xb1, 0xb4, 0x06, 0xba,
	0xce, 0x10, 0x90, 0xcf, 0x92, 0xd2, 0x5a, 0x25, 0x79, 0x0d, 0xe0, 0x4e, 0x4f, 0x93, 0xe0, 0x3a,
	0x9f, 0x75, 0xf0, 0x37, 0x0d, 0xe7, 0xd9, 0x69, 0xca, 0x83, 0x40, 0x28, 0x73, 0xda, 0x98, 0x22,
	0xb0, 0x5b, 0xa7, 0x7c, 0x12, 0x62, 0xea, 0xe9, 0x02, 0xdd, 0x72, 0x8c, 0x19, 0xdc, 0x9c, 0x60,
	0xff, 0xdb, 0x0a, 0x0c, 0x5c, 0x62, 0xc7, 0x51, 0xa1, 0x38, 0x87, 0xcd, 0xd8, 0x68, 0xf6, 0x8b,
	0xab, 0x0b, 0x5f, 0x5c, 0x8c, 0x6f, 0xb5, 0xf2, 0xf8, 0xb6, 0x0a, 0xb5, 0x57, 0xee, 0x33, 0x93,
	0xc2, 0xb5, 0xcc, 0x7d, 0x56, 0x3a, 0xa0, 0x34, 0x66, 0x0e, 0x28, 0xef, 0x60, 0x61, 0x09, 0xcf,
	0x74, 0xd1, 0xd6, 0x9f, 0xd7, 0x42, 0x04, 0x96, 0xec, 0xc2, 0x41, 0x9d, 0x9b, 0x1c, 0xd4, 0x9d,
	0x77, 0x50, 0xc9, 0x01, 0xbd, 0xdf, 0xa4, 0x03, 0x3e, 0x80, 0x6e, 0x9c, 0x45, 0x9e, 0x09, 0x2d,
	0x69, 0xad, 0x91, 0x48, 0x27, 0xce, 0x22, 0x63, 0x55, 0x12, 0xc4, 0xcc, 0xe2, 0x16, 0x33, 0xb3,
	0x3a, 0x02, 0x65, 0x3f, 0xac, 0xdf, 0xe0, 0x87, 0xd2, 0x2c, 0xbd, 0x31, 0x33, 0x4b, 0xdf, 0x87,
	0xce, 0x30, 0x77, 0xe8, 0xd1, 0x81, 0xb5, 0xa9, 0x67, 0x60, 0x39, 0x45, 0xa1, 0xe4, 0xb9, 0x08,
	0x02, 0x1e, 0x5b, 0x5b, 0xb4, 0x5b, 0x03, 0x21, 0x3e, 0x4c, 0x46, 0x78, 0xf2, 0xd8, 0xd6, 0x78,
	0x0d, 0xa1, 0xf1, 0xd4, 0x79, 0x16, 0x9d, 0xc6, 0xbe, 0x08, 0x2d, 0x4b, 0x1b, 0xaf, 0x40, 0xa0,
	0xd4, 0x58, 0x84, 0x01, 0x0f, 0xac, 0xbb, 0xf4, 0x09, 0x06, 0x62, 0xdf, 0x83, 0x5e, 0x20, 0xa4,
	0x12, 0xf1, 0x38, 0xa3, 0xe1, 0xdb, 0xda, 0x21, 0xc9, 0x59, 0x24, 0x9e, 0x77, 0xa4, 0x12, 0xa3,
	0xd7, 0x82, 0x07, 0xd6, 0x3b, 0xb4, 0x6a, 0x01, 0xb3, 0x2f, 0x60, 0x4b, 0x48, 0x4f, 0x6f, 0xdb,
	0x8b, 0x78, 0x20, 0x7c, 0xcf, 0x7c, 0xf1, 0xbb, 0xc4, 0xb9, 0x2e, 0xa4, 0x0e, 0xc4, 0x63, 0xa4,
	0x1d, 0xe8, 0xcf, 0x7f, 0x01, 0x5b, 0x33, 0xf9, 0xed, 0x49, 0x53, 0x29, 0xcc, 0x8c, 0x72, 0xd7,
	0xb9, 0xa9, 0x94, 0xb8, 0x1b, 0xe5, 0x1a, 0x50, 0x14, 0x98, 0xbb, 0xd0, 0x3a, 0x4f, 0x94, 0x97,
	0xfa, 0x8a, 0xd3, 0x91, 0xa0, 0xe2, 0x36, 0x91, 0x19, 0x4f, 0xfb, 0x33, 0xc9, 0xd4, 0x9e, 0x4f,
	0xa6, 0x6d, 0x68, 0x0a, 0xe9, 0x61, 0x58, 0xd2, 0xb9, 0xa0, 0xe5, 0xae, 0x08, 0x39, 0xe4, 0xe1,
	0x99, 0xfd, 0xbf, 0x15, 0x80, 0x69, 0x06, 0xfd, 0x8e, 0x0f, 0x05, 0xec, 0x73, 0xe8, 0x18, 0x17,
	0x4d, 0x12, 0xa9, 0xcc, 0x65, 0xc9, 0xaa, 0x33, 0x57, 0x22, 0x5c, 0x48, 0x0b, 0x84, 0xfd, 0xaf,
	0x6d, 0xe8, 0x1d, 0x5e, 0x29, 0x1e, 0x07, 0x3c, 0x38, 0xb9, 0xe4, 0x5c, 0xb1, 0x1f, 0xc0, 0xe0,
	0xcc, 0xbf, 0x48, 0xb2, 0x54, 0x28, 0xee, 0x95, 0xcf, 0x34, 0xfd, 0x02, 0xad, 0x5b, 0xd5, 0x07,
	0xd0, 0x3d, 0x13, 0xa1, 0xe2, 0xa9, 0x17, 0xf2, 0x0b, 0x1e, 0xe6, 0x07, 0x52, 0x8d, 0x7b, 0x86,
	0x28, 0xb6, 0x09, 0x2b, 0x22, 0xf0, 0xa4, 0x4a, 0xf3, 0xea, 0x22, 0x82, 0xa1, 0x4a, 0xd9, 0x23,
	0xd8, 0x16, 0xb1, 0x87, 0xd9, 0x73, 0xed, 0xa9, 0xc4, 0x93, 0xa3, 0x94, 0xf3, 0xd8, 0xa3, 0x4a,
	0xa1, 0x2b, 0xce, 0xba, 0x88, 0x5d, 0xa4, 0x9e, 0x24, 0x43, 0xa2, 0xe1, 0x67, 0xb3, 0xdf, 0x83,
	0xbb, 0x33, 0x52, 0xca, 0x57, 0x99, 0xf4, 0x8c, 0x7e, 0x5d, 0x94, 0x36, 0xa6, 0x72, 0x44, 0x3d,
	0xa2, 0xe5, 0xbe, 0x98, 0x5d, 0x8e, 0x5a, 0xa5, 0x11, 0xd3, 0x05, 0x8b, 0x15, 0x62, 0xd8, 0x31,
	0xb5, 0xd0, 0x47, 0x30, 0x10, 0xd2, 0xfb, 0x69, 0x96, 0x28, 0x6e, 0x96, 0x32, 0x35, 0xba, 0x27,
	0xe4, 0x9f, 0x20, 0x56, 0xaf, 0x50, 0x5c, 0xd0, 0xb4, 0x4a, 0x17, 0x34, 0x9f, 0x02, 0x9b, 0x24,
	0x52, 0x8a, 0xd3, 0xf0, 0xda, 0x93, 0x3c, 0x36, 0x77, 0x12, 0x6d, 0x8a, 0xbc, 0xb5, 0x9c, 0x32,
	0xcc, 0x09, 0x38, 0xf9, 0xea, 0x75, 0xb4, 0xb5, 0x81, 0xac, 0x0d, 0x84, 0xd2, 0x96, 0xbe, 0x87,
	0x7e, 0xc5, 0xdd, 0x6b, 0x86, 0x8e, 0x66, 0x20, 0x94, 0x66, 0xf8, 0x10, 0x7a, 0x29, 0x57, 0xe8,
	0x3e, 0xc3, 0xd2, 0xd5, 0x9d, 0xd4, 0x20, 0x0b, 0x26, 0x33, 0x25, 0x98, 0x71, 0xbd, 0x47, 0x93,
	0x4d, 0x57, 0x0f, 0x06, 0x66, 0x0a, 0x9f, 0xde, 0x7f, 0xf5, 0x67, 0xee, 0xbf, 0x1e, 0xc0, 0x9a,
	0x2e, 0xf8, 0x5e, 0xe9, 0xf4, 0x3d, 0x20, 0x96, 0x81, 0x26, 0xec, 0x17, 0x67, 0xf0, 0x47, 0xb0,
	0x65, 0x78, 0x03, 0x7e, 0xe6, 0x67, 0xa1, 0xf2, 0x26, 0x69, 0x72, 0x26, 0x42, 0x6e, 0x4a, 0xf2,
	0x86, 0xa6, 0x1e, 0x68, 0xe2, 0x4b, 0x4d, 0x63, 0x7f, 0x04, 0xef, 0x2e, 0x97, 0xf2, 0xe8, 0xe2,
	0x8c, 0x2a, 0x76, 0xcb, 0xbd, 0xbb, 0x4c, 0xf6, 0x08, 0x19, 0x4a, 0xcb, 0x9e, 0x25, 0x61, 0x98,
	0x5c, 0xf2, 0x54, 0x1a, 0x6b, 0xe8, 0x82, 0x6e, 0x96, 0x7d, 0x9c, 0x13, 0xb5, 0x55, 0x1e, 0xc2,
	0x46, 0x2e, 0x95, 0x0a, 0x1e, 0x07, 0xb9, 0xcc, 0x3a, 0xc9, 0x30, 0x23, 0xa3, 0x49, 0x5a, 0xc2,
	0x86, 0x9e, 0x91, 0x30, 0x41, 0xa4, 0x8b, 0x7e, 0x47, 0x23, 0x75, 0xf4, 0xdc, 0x03, 0x03, 0x7a,
	0x14, 0x1c, 0xba, 0xf2, 0x83, 0x46, 0x3d, 0xc3, 0x10, 0xf9, 0x01, 0x0c, 0x72, 0x06, 0x73, 0x8c,
	0xa3, 0x0e, 0xd0, 0x76, 0xfb, 0x86, 0xc9, 0x60, 0x4b, 0x9a, 0x28, 0x3f, 0xb6, 0xcb, 0x9a, 0x28,
	0x2d, 0x7e, 0x08, 0x66, 0x93, 0x33, 0x79, 0xa4, 0x7b, 0xc3, 0xaa, 0xa6, 0x94, 0x92, 0xe8, 0xc7,
	0xf0, 0x9e, 0xe1, 0x9e, 0xb1, 0xae, 0x97, 0xa5, 0xa1, 0x77, 0xae, 0xd4, 0x84, 0x3a, 0x47, 0x3b,
	0x37, 0x73, 0xd9, 0xbe, 0xaf, 0xd2, 0xf0, 0xa9, 0x52, 0x13, 0xb6, 0x0b, 0x9b, 0xf9, 0x7a, 0x94,
	0x01, 0x3c, 0xb7, 0xd8, 0x0e, 0x59, 0x6c, 0xdd, 0x2c, 0x69, 0x68, 0xda, 0x64, 0x38, 0x84, 0xf8,
	0x8a, 0x8f, 0x93, 0x14, 0x8b, 0xe0, 0x3b, 0x14, 0x77, 0x25, 0x0c, 0xb5, 0xb5, 0x34, 0x8b, 0x47,
	0x74, 0x5b, 0xab, 0x3b, 0xca, 0x14, 0x81, 0x23, 0xc6, 0x59, 0x16, 0x86, 0x7a, 0xc4, 0x78, 0x4f,
	0x8f, 0x18, 0x88, 0xc0, 0x11, 0xc3, 0xfe, 0xcf, 0x0a, 0x34, 0x74, 0xe1, 0xfa, 0x0e, 0x15, 0xef,
	0x1f, 0x41, 0x9f, 0x9b, 0xa2, 0xea, 0x51, 0x06, 0x9a, 0x02, 0xde, 0x77, 0x66, 0x6a, 0xad, 0xdb,
	0xe3, 0x65, 0xd0, 0xfe, 0xe7, 0x0a, 0x74, 0xb1, 0x0d, 0x86, 0x22, 0xd6, 0x05, 0x9d, 0x95, 0x26,
	0xea, 0xb6, 0x99, 0x9a, 0xbf, 0x0f, 0xfd, 0xb3, 0x24, 0x8d, 0x7c, 0x85, 0x49, 0x48, 0x54, 0x5d,
	0x78, 0x7b, 0x05, 0x16, 0x55, 0x4c, 0x4f, 0xc1, 0xb5, 0xfb, 0xb5, 0xe2, 0x14, 0x4c, 0xc5, 0xbd,
	0x10, 0xd6, 0xf4, 0x3a, 0x79, 0x63, 0xaa, 0xf3, 0x5b, 0x62, 0x7c, 0x08, 0x1b, 0xaf, 0xf9, 0xf5,
	0x65, 0x92, 0x06, 0xd2, 0x53, 0x89, 0xf2, 0x43, 0xc3, 0xad, 0x2f, 0x42, 0x59, 0x4e, 0x3b, 0x41,
	0x12, 0x49, 0xd8, 0xff, 0x55, 0x01, 0xf6, 0x84, 0x26, 0xfe, 0x93, 0x14, 0x93, 0xe5, 0xd5, 0x24,
	0xc0, 0xc6, 0xfc, 0x9d, 0x6a, 0xa9, 0x3d, 0x65, 0xac, 0x9b, 0x77, 0x55, 0x1c, 0x43, 0x7a, 0x4e,
	0xd9, 0xe6, 0x6e, 0x57, 0x95, 0x20, 0xfb, 0x17, 0x15, 0x58, 0xdf, 0xd7, 0x07, 0x23, 0x4c, 0xc9,
	0xd0, 0xdc, 0xd4, 0xcc, 0x5f, 0xc6, 0x56, 0x16, 0x2e, 0x63, 0x6f, 0x78, 0x00, 0x79, 0x00, 0x6b,
	0x67, 0x49, 0x3a, 0xe2, 0xd8, 0x17, 0x02, 0xef, 0x4c, 0xf0, 0x30, 0xd0, 0x17, 0x52, 0x6d, 0x77,
	0x40, 0x84, 0x21, 0x8f, 0x83, 0xc7, 0x84, 0xc6, 0xd4, 0x8f, 0x31, 0xee, 0x0d, 0x97, 0x76, 0x14,
	0x20, 0x4a, 0x33, 0xd8, 0x7f, 0x57, 0x81, 0xf6, 0x49, 0x79, 0xfa, 0x3b, 0xd7, 0xcf, 0x02, 0x15,
	0x3a, 0x36, 0x1a, 0x28, 0xbf, 0x43, 0xad, 0x4e, 0xef, 0x50, 0x37, 0xa0, 0x71, 0x29, 0x02, 0x75,
	0x4e, 0xb6, 0xab, 0xb9, 0x1a, 0x58, 0xbe, 0xb5, 0xfa, 0x1b, 0x6d, 0xad, 0xb1, 0xb0, 0xb5, 0xbf,
	0xad, 0xc2, 0x6a, 0xb1, 0xb5, 0x03, 0xae, 0x7c, 0x11, 0x4a, 0xf6, 0x3d, 0x1c, 0xee, 0xa9, 0x70,
	0x17, 0xe1, 0x50, 0xf0, 0xb8, 0x39, 0x09, 0x23, 0xe6, 0x5c, 0x8c, 0xcf, 0x4d, 0x30, 0x94, 0x59,
	0x08, 0xcf, 0x6c, 0x58, 0x89, 0xfc, 0xab, 0xb4, 0x70, 0x7d, 0x99, 0xc3, 0x50, 0x88, 0x87, 0x07,
	0x22, 0x8b, 0x4c, 0xe2, 0xcd, 0xf2, 0x10, 0x85, 0x7d, 0x84, 0xf3, 0xae, 0x1f, 0x07, 0x7e, 0x1a,
	0x98, 0x51, 0xa9, 0xcc, 0x55, 0xd0, 0x96, 0xdb, 0x65, 0xe5, 0x8d, 0xec, 0xd2, 0x5c, 0xb0, 0xcb,
	0x5f, 0xd6, 0xa0, 0x6f, 0xe2, 0x69, 0x18, 0x8b, 0xc9, 0x84, 0xeb, 0x97, 0x2f, 0xac, 0x92, 0x69,
	0x7e, 0x8b, 0x95, 0x83, 0x74, 0x4c, 0xcf, 0xa4, 0x4a, 0x22, 0x6f, 0xea, 0xc0, 0xb6, 0xc6, 0xbc,
	0x4a, 0x43, 0xf6, 0x09, 0xac, 0xe6, 0xad, 0x12, 0xbb, 0x4c, 0x86, 0x5d, 0x52, 0xcf, 0x59, 0x03,
	0x83, 0x7f, 0x66, 0xd0, 0xf3, 0xe1, 0x5a, 0x5f, 0x0c, 0xd7, 0x5d, 0x7d, 0xf3, 0x18, 0x8a, 0x9f,
	0xf1, 0xdc, 0x1c, 0x1b, 0xce, 0x92, 0xc8, 0x77, 0xa7, 0x6c, 0x0b, 0x97, 0xfc, 0x2b, 0x8b, 0x97,
	0xfc, 0x9f, 0x03, 0x14, 0xe7, 0x13, 0x3d, 0x41, 0x75, 0x76, 0xd7, 0x9c, 0xf9, 0xc8, 0x70, 0x4b,
	0x4c, 0xd3, 0xc4, 0x69, 0xfd, 0xca, 0xc4, 0x69, 0xbf, 0x91, 0x17, 0x60, 0xc1, 0x0b, 0xff, 0x58,
	0x85, 0xb5, 0xdc, 0x0b, 0xca, 0x57, 0x78, 0x0c, 0x1a, 0xc9, 0xc5, 0xfb, 0x88, 0x0a, 0x9d, 0x96,
	0x67, 0xee, 0x23, 0xd8, 0x97, 0xb0, 0xad, 0xcf, 0x68, 0x8b, 0x37, 0x3b, 0x55, 0x6a, 0x5c, 0x9b,
	0x9a, 0x3c, 0x7f, 0xb1, 0xf3, 0x09, 0xac, 0x2e, 0x08, 0xd4, 0x48, 0xff, 0x40, 0xce, 0xb1, 0xde,
	0x83, 0x0e, 0xbd, 0x21, 0x96, 0x2e, 0x8c, 0xea, 0x2e, 0x10, 0xaa, 0xb8, 0x24, 0xba, 0x10, 0xfc,
	0xd2, 0xd0, 0x1b, 0x44, 0x6f, 0x23, 0x46, 0x93, 0x7f, 0xa3, 0xa6, 0xfa, 0xab, 0x2a, 0x0c, 0xbe,
	0xc5, 0xa5, 0xff, 0xbf, 0x86, 0xfa, 0x90, 0x0e, 0x9d, 0x78, 0xfa, 0x2e, 0x99, 0xa7, 0xee, 0x76,
	0x0d, 0x52, 0x33, 0x61, 0x33, 0xf3, 0x2f, 0x92, 0xd2, 0x59, 0x43, 0xdb, 0xa4, 0x97, 0x63, 0x8b,
	0x0f, 0x2e, 0x29, 0xd2, 0x06, 0x69, 0x4f, 0xb5, 0xfc, 0x36, 0xed, 0xf1, 0x17, 0x35, 0x68, 0x90,
	0x3d, 0xd8, 0x97, 0xd0, 0x2a, 0x46, 0xe9, 0x0a, 0x75, 0x92, 0xdb, 0xae, 0xbc, 0x0a, 0x5e, 0x8a,
	0x6f, 0xec, 0x90, 0x64, 0x90, 0xaa, 0xab, 0x01, 0xf6, 0x09, 0x34, 0xcd, 0x05, 0x9c, 0x29, 0x6b,
	0x03, 0x67, 0xb6, 0x4e, 0xb8, 0x39, 0x9d, 0xed, 0x01, 0x2b, 0x6e, 0x17, 0x0b, 0xa7, 0x98, 0x42,
	0xc7, 0x9c, 0x85, 0xb8, 0x76, 0xd7, 0x46, 0x0b, 0xa1, 0xfe, 0x10, 0xa0, 0x24, 0x9a, 0x1f, 0x14,
	0xe7, 0xfc, 0xec, 0x96, 0x78, 0x8a, 0x3e, 0xbe, 0xf2, 0x26, 0x7d, 0xbc, 0xf9, 0x16, 0x7d, 0xbc,
	0xf5, 0xa6, 0x7d, 0xdc, 0xfe, 0x97, 0x3a, 0x0c, 0x0a, 0xcd, 0xfb, 0x7e, 0x1c, 0x84, 0x7c, 0xe1,
	0xef, 0x07, 0xbf, 0x4f, 0x1f, 0x98, 0xaa, 0xe9, 0x84, 0x74, 0xbb, 0x7b, 0xda, 0xc4, 0x4d, 0x93,
	0xd3, 0xfb, 0x00, 0x29, 0x97, 0x49, 0x98, 0x51, 0xa9, 0xd4, 0x05, 0xb5, 0x84, 0x41, 0xff, 0xd1,
	0xcb, 0x45, 0xfe, 0xe0, 0x49, 0x00, 0x5d, 0x30, 0x99, 0x97, 0x68, 0x4f, 0x66, 0x11, 0xd9, 0xb4,
	0xe2, 0x76, 0x72, 0xdc, 0x30, 0x8b, 0x30, 0xd8, 0x0b, 0x16, 0x1d, 0xaa, 0xfa, 0xfd, 0xb8, 0x97,
	0x63, 0x8b, 0x73, 0x75, 0xfe, 0x6e, 0x4d, 0x9a, 0x9a, 0x5a, 0x53, 0x8e, 0x33, 0x9a, 0x0a, 0x16,
	0xad, 0x49, 0xbf, 0x2f, 0xf7, 0x72, 0x6c, 0x91, 0x82, 0x85, 0xc5, 0x3d, 0xff, 0x62, 0x4c, 0x47,
	0xd0, 0x8a, 0xdb, 0x2d, 0x90, 0x7b, 0x17, 0x63, 0x3c, 0x36, 0x25, 0x13, 0x2c, 0x67, 0x25, 0x4e,
	0x9e, 0x62, 0x2f, 0x01, 0xe2, 0xde, 0x40, 0xea, 0x70, 0x2a, 0x41, 0x34, 0x94, 0xc2, 0x66, 0xbc,
	0x44, 0xaa, 0xa3, 0xa5, 0x90, 0xba, 0x20, 0xb5, 0x0b, 0x9b, 0x61, 0x72, 0xb9, 0x44, 0xa8, 0x4b,
	0x42, 0xeb, 0x61, 0x72, 0xb9, 0x20, 0xf3, 0x25, 0x6c, 0x8f, 0xc2, 0x44, 0xf2, 0x25, 0x52, 0x3d,
	0x92, 0xda, 0x24, 0xf2, 0x82, 0x9c, 0x05, 0xcd, 0x8c, 0x46, 0xd0, 0x80, 0x8e, 0xb2, 0x2d, 0x37,
	0x07, 0xed, 0x7f, 0xaa, 0x80, 0x55, 0xb0, 0x3f, 0x15, 0x52, 0x25, 0xa9, 0x18, 0xb9, 0xfc, 0xa7,
	0x19, 0x97, 0x74, 0x89, 0x7d, 0x96, 0x26, 0xd1, 0x9b, 0x5c, 0x62, 0x23, 0x1f, 0x7b, 0x00, 0x55,
	0x95, 0xbc, 0x41, 0x80, 0x55, 0x55, 0xf2, 0x76, 0x91, 0x65, 0x47, 0x30, 0xf8, 0x2d, 0x6e, 0xd2,
	0xfe, 0x43, 0xd8, 0x98, 0x4b, 0xae, 0x23, 0xc5, 0x23, 0xc9, 0x3e, 0x82, 0x86, 0xc0, 0x1f, 0xa6,
	0xd6, 0xad, 0x3a, 0x73, 0x5c, 0xae, 0x26, 0xdb, 0x0f, 0x00, 0xe8, 0x34, 0xa3, 0xa5, 0xde, 0x9d,
	0x95, 0x5a, 0x71, 0xf4, 0xc1, 0xc7, 0xf0, 0x3a, 0xd0, 0x35, 0xef, 0x71, 0x9a, 0xfb, 0xfd, 0x59,
	0xee, 0xe9, 0x03, 0xb5, 0x46, 0x3f, 0xf8, 0x45, 0x05, 0x3a, 0xa5, 0x67, 0x4a, 0xb6, 0x0a, 0xdd,
	0xbd, 0xe1, 0xf0, 0xf0, 0xc4, 0x3b, 0x7c, 0x7e, 0x72, 0x74, 0xf2, 0x93, 0xd5, 0x3b, 0x6c, 0x0d,
	0x7a, 0x2f, 0x0f, 0xdd, 0xe1, 0x8b, 0xe7, 0x39, 0xaa, 0xc2, 0xd6, 0x61, 0xf0, 0xec, 0xc5, 0xfe,
	0xde, 0xc9, 0xd1, 0x14, 0x59, 0x65, 0x0c, 0xfa, 0xfb, 0x2f, 0x8e, 0x5f, 0xee, 0x3d, 0xff, 0x49,
	0x8e, 0xab, 0x21, 0xe3, 0xe1, 0x9f, 0xed, 0x3f, 0xdd, 0x7b, 0xfe, 0xe4, 0x30, 0x47, 0xd6, 0xd9,
	0x00, 0x3a, 0xc7, 0x47, 0xc3, 0xfd, 0x1c, 0xd1, 0x60, 0xdb, 0xb0, 0xfe, 0xc2, 0x7d, 0xb2, 0xf7,
	0xfc, 0xe8, 0xcf, 0x67, 0x54, 0xae, 0xec, 0x7e, 0x0d, 0xed, 0xc2, 0x24, 0xec, 0x53, 0xe8, 0x3e,
	0xe1, 0x6a, 0x0a, 0x97, 0x0a, 0xe6, 0xce, 0x7c, 0x5d, 0xb4, 0xef, 0xec, 0x3e, 0x86, 0xde, 0xf3,
	0xb9, 0x13, 0xe4, 0xea, 0x13, 0xae, 0x66, 0x71, 0x65, 0x1d, 0xcb, 0xea, 0xa4, 0x7d, 0x67, 0xf7,
	0x1f, 0xea, 0xd0, 0x33, 0x8f, 0x3c, 0xf2, 0x65, 0x9a, 0x5c, 0x5d, 0xb3, 0xaf, 0x60, 0xb5, 0x18,
	0x45, 0xf2, 0xb7, 0xcf, 0xad, 0x85, 0x10, 0x38, 0x8c, 0x26, 0xea, 0x7a, 0xa7, 0xb0, 0xb7, 0x7d,
	0xe7, 0x61, 0x85, 0x3d, 0x82, 0x7e, 0x21, 0xa9, 0x4f, 0xd8, 0x37, 0xc9, 0x19, 0xaf, 0x92, 0xd4,
	0xd7, 0x30, 0x28, 0xa4, 0xf4, 0xc5, 0xe3, 0x8d, 0x62, 0x9d, 0xd2, 0xcd, 0x24, 0xc9, 0xee, 0x97,
	0xf6, 0x6a, 0x9e, 0xb9, 0x6e, 0x14, 0x5e, 0x77, 0x16, 0x1f, 0xc2, 0x48, 0xc9, 0x21, 0xac, 0x4d,
	0xb7, 0x6d, 0x9e, 0x04, 0x6f, 0xd4, 0xb2, 0xe1, 0x2c, 0x79, 0x35, 0x24, 0x35, 0x7b, 0xa5, 0xef,
	0xd0, 0x0f, 0x94, 0x37, 0x2a, 0x61, 0xce, 0xc2, 0x0b, 0x26, 0xa9, 0x78, 0x0c, 0x5b, 0x85, 0x8a,
	0xe7, 0xfc, 0x52, 0x4e, 0xa3, 0xe1, 0x26, 0x4d, 0x0b, 0x49, 0x45, 0x7a, 0x9e, 0x82, 0x55, 0xe8,
	0x19, 0x26, 0x23, 0xe1, 0x87, 0x6f, 0xa9, 0x69, 0xf7, 0x6f, 0xaa, 0xd0, 0xcd, 0x6b, 0x09, 0x5d,
	0x30, 0x1c, 0xc3, 0x76, 0x0e, 0xcf, 0x6b, 0xbe, 0xeb, 0xdc, 0x54, 0x23, 0x77, 0x36, 0x9d, 0x65,
	0x15, 0xc2, 0xbe, 0xc3, 0xfe, 0x18, 0x36, 0x73, 0xde, 0xd9, 0x0f, 0x7e, 0x1b, 0x65, 0x9f, 0x43,
	0x3f, 0xe7, 0xa5, 0xf0, 0x92, 0x6c, 0xd5, 0x99, 0x17, 0xee, 0x38, 0xd3, 0x5a, 0x63, 0xdf, 0xc1,
	0xac, 0xc9, 0x39, 0x4c, 0x24, 0x2f, 0x13, 0xea, 0x39, 0xe5, 0xa2, 0x63, 0xdf, 0x39, 0x5d, 0x21,
	0xe3, 0x7d, 0xf1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x46, 0x71, 0x18, 0x1d, 0x29, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SentimentClient is the client API for Sentiment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SentimentClient interface {
	GetSentiment(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*SentimentModel, error)
}

type sentimentClient struct {
	cc *grpc.ClientConn
}

func NewSentimentClient(cc *grpc.ClientConn) SentimentClient {
	return &sentimentClient{cc}
}

func (c *sentimentClient) GetSentiment(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*SentimentModel, error) {
	out := new(SentimentModel)
	err := c.cc.Invoke(ctx, "/Sentiment/GetSentiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentimentServer is the server API for Sentiment service.
type SentimentServer interface {
	GetSentiment(context.Context, *BaseModel) (*SentimentModel, error)
}

// UnimplementedSentimentServer can be embedded to have forward compatible implementations.
type UnimplementedSentimentServer struct {
}

func (*UnimplementedSentimentServer) GetSentiment(ctx context.Context, req *BaseModel) (*SentimentModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentiment not implemented")
}

func RegisterSentimentServer(s *grpc.Server, srv SentimentServer) {
	s.RegisterService(&_Sentiment_serviceDesc, srv)
}

func _Sentiment_GetSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentimentServer).GetSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sentiment/GetSentiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentimentServer).GetSentiment(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sentiment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sentiment",
	HandlerType: (*SentimentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSentiment",
			Handler:    _Sentiment_GetSentiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// NamedEntitiesClient is the client API for NamedEntities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamedEntitiesClient interface {
	GetNamedEntities(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*NamedEntitiesModel, error)
}

type namedEntitiesClient struct {
	cc *grpc.ClientConn
}

func NewNamedEntitiesClient(cc *grpc.ClientConn) NamedEntitiesClient {
	return &namedEntitiesClient{cc}
}

func (c *namedEntitiesClient) GetNamedEntities(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*NamedEntitiesModel, error) {
	out := new(NamedEntitiesModel)
	err := c.cc.Invoke(ctx, "/NamedEntities/GetNamedEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamedEntitiesServer is the server API for NamedEntities service.
type NamedEntitiesServer interface {
	GetNamedEntities(context.Context, *BaseModel) (*NamedEntitiesModel, error)
}

// UnimplementedNamedEntitiesServer can be embedded to have forward compatible implementations.
type UnimplementedNamedEntitiesServer struct {
}

func (*UnimplementedNamedEntitiesServer) GetNamedEntities(ctx context.Context, req *BaseModel) (*NamedEntitiesModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedEntities not implemented")
}

func RegisterNamedEntitiesServer(s *grpc.Server, srv NamedEntitiesServer) {
	s.RegisterService(&_NamedEntities_serviceDesc, srv)
}

func _NamedEntities_GetNamedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedEntitiesServer).GetNamedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamedEntities/GetNamedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedEntitiesServer).GetNamedEntities(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamedEntities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NamedEntities",
	HandlerType: (*NamedEntitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamedEntities",
			Handler:    _NamedEntities_GetNamedEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// MessagesProxyClient is the client API for MessagesProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagesProxyClient interface {
	SubscribeArticle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error)
	SubscribeTweet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeTweetClient, error)
	SubscribeReddit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeRedditClient, error)
	SubscribeDiscord(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeDiscordClient, error)
	SubscribeTelegram(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeTelegramClient, error)
	SubscribeBitmex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeBitmexClient, error)
	SubscribeNewsSentiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeNewsSentimentClient, error)
	SubscribeSocialSentiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeSocialSentimentClient, error)
}

type messagesProxyClient struct {
	cc *grpc.ClientConn
}

func NewMessagesProxyClient(cc *grpc.ClientConn) MessagesProxyClient {
	return &messagesProxyClient{cc}
}

func (c *messagesProxyClient) SubscribeArticle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[0], "/MessagesProxy/SubscribeArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeArticleClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type messagesProxySubscribeArticleClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeArticleClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeTweet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeTweetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[1], "/MessagesProxy/SubscribeTweet", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeTweetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeTweetClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type messagesProxySubscribeTweetClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeTweetClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeReddit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeRedditClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[2], "/MessagesProxy/SubscribeReddit", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeRedditClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeRedditClient interface {
	Recv() (*RedditPost, error)
	grpc.ClientStream
}

type messagesProxySubscribeRedditClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeRedditClient) Recv() (*RedditPost, error) {
	m := new(RedditPost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeDiscord(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeDiscordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[3], "/MessagesProxy/SubscribeDiscord", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeDiscordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeDiscordClient interface {
	Recv() (*DiscordUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeDiscordClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeDiscordClient) Recv() (*DiscordUserMessage, error) {
	m := new(DiscordUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeTelegram(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeTelegramClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[4], "/MessagesProxy/SubscribeTelegram", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeTelegramClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeTelegramClient interface {
	Recv() (*TelegramUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeTelegramClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeTelegramClient) Recv() (*TelegramUserMessage, error) {
	m := new(TelegramUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeBitmex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeBitmexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[5], "/MessagesProxy/SubscribeBitmex", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeBitmexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeBitmexClient interface {
	Recv() (*BitmexUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeBitmexClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeBitmexClient) Recv() (*BitmexUserMessage, error) {
	m := new(BitmexUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeNewsSentiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeNewsSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[6], "/MessagesProxy/SubscribeNewsSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeNewsSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeNewsSentimentClient interface {
	Recv() (*SentimentCandle, error)
	grpc.ClientStream
}

type messagesProxySubscribeNewsSentimentClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeNewsSentimentClient) Recv() (*SentimentCandle, error) {
	m := new(SentimentCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeSocialSentiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MessagesProxy_SubscribeSocialSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[7], "/MessagesProxy/SubscribeSocialSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeSocialSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeSocialSentimentClient interface {
	Recv() (*SentimentCandle, error)
	grpc.ClientStream
}

type messagesProxySubscribeSocialSentimentClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeSocialSentimentClient) Recv() (*SentimentCandle, error) {
	m := new(SentimentCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesProxyServer is the server API for MessagesProxy service.
type MessagesProxyServer interface {
	SubscribeArticle(*empty.Empty, MessagesProxy_SubscribeArticleServer) error
	SubscribeTweet(*empty.Empty, MessagesProxy_SubscribeTweetServer) error
	SubscribeReddit(*empty.Empty, MessagesProxy_SubscribeRedditServer) error
	SubscribeDiscord(*empty.Empty, MessagesProxy_SubscribeDiscordServer) error
	SubscribeTelegram(*empty.Empty, MessagesProxy_SubscribeTelegramServer) error
	SubscribeBitmex(*empty.Empty, MessagesProxy_SubscribeBitmexServer) error
	SubscribeNewsSentiment(*empty.Empty, MessagesProxy_SubscribeNewsSentimentServer) error
	SubscribeSocialSentiment(*empty.Empty, MessagesProxy_SubscribeSocialSentimentServer) error
}

// UnimplementedMessagesProxyServer can be embedded to have forward compatible implementations.
type UnimplementedMessagesProxyServer struct {
}

func (*UnimplementedMessagesProxyServer) SubscribeArticle(req *empty.Empty, srv MessagesProxy_SubscribeArticleServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArticle not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeTweet(req *empty.Empty, srv MessagesProxy_SubscribeTweetServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTweet not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeReddit(req *empty.Empty, srv MessagesProxy_SubscribeRedditServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeReddit not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeDiscord(req *empty.Empty, srv MessagesProxy_SubscribeDiscordServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDiscord not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeTelegram(req *empty.Empty, srv MessagesProxy_SubscribeTelegramServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTelegram not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeBitmex(req *empty.Empty, srv MessagesProxy_SubscribeBitmexServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBitmex not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeNewsSentiment(req *empty.Empty, srv MessagesProxy_SubscribeNewsSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewsSentiment not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeSocialSentiment(req *empty.Empty, srv MessagesProxy_SubscribeSocialSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSocialSentiment not implemented")
}

func RegisterMessagesProxyServer(s *grpc.Server, srv MessagesProxyServer) {
	s.RegisterService(&_MessagesProxy_serviceDesc, srv)
}

func _MessagesProxy_SubscribeArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeArticle(m, &messagesProxySubscribeArticleServer{stream})
}

type MessagesProxy_SubscribeArticleServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type messagesProxySubscribeArticleServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeArticleServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeTweet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeTweet(m, &messagesProxySubscribeTweetServer{stream})
}

type MessagesProxy_SubscribeTweetServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type messagesProxySubscribeTweetServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeTweetServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeReddit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeReddit(m, &messagesProxySubscribeRedditServer{stream})
}

type MessagesProxy_SubscribeRedditServer interface {
	Send(*RedditPost) error
	grpc.ServerStream
}

type messagesProxySubscribeRedditServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeRedditServer) Send(m *RedditPost) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeDiscord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeDiscord(m, &messagesProxySubscribeDiscordServer{stream})
}

type MessagesProxy_SubscribeDiscordServer interface {
	Send(*DiscordUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeDiscordServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeDiscordServer) Send(m *DiscordUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeTelegram_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeTelegram(m, &messagesProxySubscribeTelegramServer{stream})
}

type MessagesProxy_SubscribeTelegramServer interface {
	Send(*TelegramUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeTelegramServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeTelegramServer) Send(m *TelegramUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeBitmex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeBitmex(m, &messagesProxySubscribeBitmexServer{stream})
}

type MessagesProxy_SubscribeBitmexServer interface {
	Send(*BitmexUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeBitmexServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeBitmexServer) Send(m *BitmexUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeNewsSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeNewsSentiment(m, &messagesProxySubscribeNewsSentimentServer{stream})
}

type MessagesProxy_SubscribeNewsSentimentServer interface {
	Send(*SentimentCandle) error
	grpc.ServerStream
}

type messagesProxySubscribeNewsSentimentServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeNewsSentimentServer) Send(m *SentimentCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeSocialSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeSocialSentiment(m, &messagesProxySubscribeSocialSentimentServer{stream})
}

type MessagesProxy_SubscribeSocialSentimentServer interface {
	Send(*SentimentCandle) error
	grpc.ServerStream
}

type messagesProxySubscribeSocialSentimentServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeSocialSentimentServer) Send(m *SentimentCandle) error {
	return x.ServerStream.SendMsg(m)
}

var _MessagesProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MessagesProxy",
	HandlerType: (*MessagesProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeArticle",
			Handler:       _MessagesProxy_SubscribeArticle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTweet",
			Handler:       _MessagesProxy_SubscribeTweet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeReddit",
			Handler:       _MessagesProxy_SubscribeReddit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeDiscord",
			Handler:       _MessagesProxy_SubscribeDiscord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTelegram",
			Handler:       _MessagesProxy_SubscribeTelegram_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBitmex",
			Handler:       _MessagesProxy_SubscribeBitmex_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewsSentiment",
			Handler:       _MessagesProxy_SubscribeNewsSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSocialSentiment",
			Handler:       _MessagesProxy_SubscribeSocialSentiment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// HistoricDataClient is the client API for HistoricData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistoricDataClient interface {
	HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (*SentimentCandleItems, error)
	HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (*SentimentCandleItems, error)
	HistoricTweets(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (*TweetItems, error)
	HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (*ArticleItems, error)
}

type historicDataClient struct {
	cc *grpc.ClientConn
}

func NewHistoricDataClient(cc *grpc.ClientConn) HistoricDataClient {
	return &historicDataClient{cc}
}

func (c *historicDataClient) HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (*SentimentCandleItems, error) {
	out := new(SentimentCandleItems)
	err := c.cc.Invoke(ctx, "/HistoricData/HistoricSocialSentiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicDataClient) HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (*SentimentCandleItems, error) {
	out := new(SentimentCandleItems)
	err := c.cc.Invoke(ctx, "/HistoricData/HistoricNewsSentiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicDataClient) HistoricTweets(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (*TweetItems, error) {
	out := new(TweetItems)
	err := c.cc.Invoke(ctx, "/HistoricData/HistoricTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicDataClient) HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (*ArticleItems, error) {
	out := new(ArticleItems)
	err := c.cc.Invoke(ctx, "/HistoricData/HistoricArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoricDataServer is the server API for HistoricData service.
type HistoricDataServer interface {
	HistoricSocialSentiment(context.Context, *SentimentHistoricRequest) (*SentimentCandleItems, error)
	HistoricNewsSentiment(context.Context, *SentimentHistoricRequest) (*SentimentCandleItems, error)
	HistoricTweets(context.Context, *HistoricRequest) (*TweetItems, error)
	HistoricArticles(context.Context, *HistoricRequest) (*ArticleItems, error)
}

// UnimplementedHistoricDataServer can be embedded to have forward compatible implementations.
type UnimplementedHistoricDataServer struct {
}

func (*UnimplementedHistoricDataServer) HistoricSocialSentiment(ctx context.Context, req *SentimentHistoricRequest) (*SentimentCandleItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricSocialSentiment not implemented")
}
func (*UnimplementedHistoricDataServer) HistoricNewsSentiment(ctx context.Context, req *SentimentHistoricRequest) (*SentimentCandleItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricNewsSentiment not implemented")
}
func (*UnimplementedHistoricDataServer) HistoricTweets(ctx context.Context, req *HistoricRequest) (*TweetItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricTweets not implemented")
}
func (*UnimplementedHistoricDataServer) HistoricArticles(ctx context.Context, req *HistoricRequest) (*ArticleItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricArticles not implemented")
}

func RegisterHistoricDataServer(s *grpc.Server, srv HistoricDataServer) {
	s.RegisterService(&_HistoricData_serviceDesc, srv)
}

func _HistoricData_HistoricSocialSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentimentHistoricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricDataServer).HistoricSocialSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HistoricData/HistoricSocialSentiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricDataServer).HistoricSocialSentiment(ctx, req.(*SentimentHistoricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricData_HistoricNewsSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentimentHistoricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricDataServer).HistoricNewsSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HistoricData/HistoricNewsSentiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricDataServer).HistoricNewsSentiment(ctx, req.(*SentimentHistoricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricData_HistoricTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricDataServer).HistoricTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HistoricData/HistoricTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricDataServer).HistoricTweets(ctx, req.(*HistoricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricData_HistoricArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricDataServer).HistoricArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HistoricData/HistoricArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricDataServer).HistoricArticles(ctx, req.(*HistoricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HistoricData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HistoricData",
	HandlerType: (*HistoricDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HistoricSocialSentiment",
			Handler:    _HistoricData_HistoricSocialSentiment_Handler,
		},
		{
			MethodName: "HistoricNewsSentiment",
			Handler:    _HistoricData_HistoricNewsSentiment_Handler,
		},
		{
			MethodName: "HistoricTweets",
			Handler:    _HistoricData_HistoricTweets_Handler,
		},
		{
			MethodName: "HistoricArticles",
			Handler:    _HistoricData_HistoricArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}
