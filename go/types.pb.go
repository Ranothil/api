// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	BaseModel
	SentimentModel
	CryptopanicEntrySource
	CryptopanicEntryVotes
	CryptopanicEntryMetadata
	CryptopanicRawEntry
	CryptopanicFeed
	CryptopanicPost
	NamedEntityOccurrence
	NamedEntitiesModel
	Article
	UserMessage
	BitmexUserMessage
	TelegramUserMessage
	DiscordUserMessage
	CommentCountTimeSnapshot
	Comment
	RedditPostModel
	RedditPost
	ExtendedTweet
	Tweet
	SentimentCandle
	AssetsFilter
	AggregationCandleFilter
	SentimentHistoricRequest
	HistoricRequest
	Asset
	AssetItems
	AggId
	AggregationCandle
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Types of named entities
type NamedEntity int32

const (
	NamedEntity_ASSET_ENTITY        NamedEntity = 0
	NamedEntity_PERSON_ENTITY       NamedEntity = 1
	NamedEntity_LOCATION_ENTITY     NamedEntity = 2
	NamedEntity_COMPANY_ENTITY      NamedEntity = 3
	NamedEntity_EXCHANGE_ENTITY     NamedEntity = 4
	NamedEntity_MISC_ENTITY         NamedEntity = 5
	NamedEntity_ORGANIZATION_ENTITY NamedEntity = 6
)

var NamedEntity_name = map[int32]string{
	0: "ASSET_ENTITY",
	1: "PERSON_ENTITY",
	2: "LOCATION_ENTITY",
	3: "COMPANY_ENTITY",
	4: "EXCHANGE_ENTITY",
	5: "MISC_ENTITY",
	6: "ORGANIZATION_ENTITY",
}
var NamedEntity_value = map[string]int32{
	"ASSET_ENTITY":        0,
	"PERSON_ENTITY":       1,
	"LOCATION_ENTITY":     2,
	"COMPANY_ENTITY":      3,
	"EXCHANGE_ENTITY":     4,
	"MISC_ENTITY":         5,
	"ORGANIZATION_ENTITY": 6,
}

func (x NamedEntity) String() string {
	return proto.EnumName(NamedEntity_name, int32(x))
}
func (NamedEntity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Base model for messages or news, contains basic data like title, content, source, published date etc..
type BaseModel struct {
	// unique identifier with schema
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// title of article
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// full content stripped of unnecessary characters(js, html tags...)
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	//
	Crawler string `protobuf:"bytes,4,opt,name=crawler" json:"crawler,omitempty"`
	// timestamp representing the datetime, when the article has been published
	PubDate *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate" json:"pub_date,omitempty"`
	// timestamp representing acquisition datetime
	Created *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	// url of article
	Source string `protobuf:"bytes,7,opt,name=source" json:"source,omitempty"`
	// summary provided by the domain
	Excerpt string `protobuf:"bytes,8,opt,name=excerpt" json:"excerpt,omitempty"`
	// list of video sources
	Videos []string `protobuf:"bytes,9,rep,name=videos" json:"videos,omitempty"`
	// list of image sources
	Images []string `protobuf:"bytes,10,rep,name=images" json:"images,omitempty"`
	// list of off-page hyperlinks
	Links []string `protobuf:"bytes,11,rep,name=links" json:"links,omitempty"`
	// author of article
	Author string `protobuf:"bytes,12,opt,name=author" json:"author,omitempty"`
	// identified language
	Lang string `protobuf:"bytes,13,opt,name=lang" json:"lang,omitempty"`
	// importance of the article's creator
	Weight float64 `protobuf:"fixed64,14,opt,name=weight" json:"weight,omitempty"`
}

func (m *BaseModel) Reset()                    { *m = BaseModel{} }
func (m *BaseModel) String() string            { return proto.CompactTextString(m) }
func (*BaseModel) ProtoMessage()               {}
func (*BaseModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BaseModel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BaseModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BaseModel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BaseModel) GetCrawler() string {
	if m != nil {
		return m.Crawler
	}
	return ""
}

func (m *BaseModel) GetPubDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PubDate
	}
	return nil
}

func (m *BaseModel) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *BaseModel) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BaseModel) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *BaseModel) GetVideos() []string {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *BaseModel) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *BaseModel) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *BaseModel) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BaseModel) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *BaseModel) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// *
// Group data that refers to sentiment of message
type SentimentModel struct {
	// analyzed sentiment <-10, 10>
	Sentiment float64 `protobuf:"fixed64,1,opt,name=sentiment" json:"sentiment,omitempty"`
	// analyzed impact in the respective area
	MarketImpact float64 `protobuf:"fixed64,2,opt,name=market_impact,json=marketImpact" json:"market_impact,omitempty"`
}

func (m *SentimentModel) Reset()                    { *m = SentimentModel{} }
func (m *SentimentModel) String() string            { return proto.CompactTextString(m) }
func (*SentimentModel) ProtoMessage()               {}
func (*SentimentModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SentimentModel) GetSentiment() float64 {
	if m != nil {
		return m.Sentiment
	}
	return 0
}

func (m *SentimentModel) GetMarketImpact() float64 {
	if m != nil {
		return m.MarketImpact
	}
	return 0
}

type CryptopanicEntrySource struct {
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	Domain string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Path   string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
}

func (m *CryptopanicEntrySource) Reset()                    { *m = CryptopanicEntrySource{} }
func (m *CryptopanicEntrySource) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicEntrySource) ProtoMessage()               {}
func (*CryptopanicEntrySource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CryptopanicEntrySource) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicEntrySource) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CryptopanicEntrySource) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicEntrySource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CryptopanicEntryVotes struct {
	Negative  int32 `protobuf:"varint,1,opt,name=negative" json:"negative,omitempty"`
	Positive  int32 `protobuf:"varint,2,opt,name=positive" json:"positive,omitempty"`
	Important int32 `protobuf:"varint,3,opt,name=important" json:"important,omitempty"`
	Liked     int32 `protobuf:"varint,4,opt,name=liked" json:"liked,omitempty"`
	Disliked  int32 `protobuf:"varint,5,opt,name=disliked" json:"disliked,omitempty"`
	Lol       int32 `protobuf:"varint,6,opt,name=lol" json:"lol,omitempty"`
	Toxic     int32 `protobuf:"varint,7,opt,name=toxic" json:"toxic,omitempty"`
	Saved     int32 `protobuf:"varint,8,opt,name=saved" json:"saved,omitempty"`
}

func (m *CryptopanicEntryVotes) Reset()                    { *m = CryptopanicEntryVotes{} }
func (m *CryptopanicEntryVotes) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicEntryVotes) ProtoMessage()               {}
func (*CryptopanicEntryVotes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CryptopanicEntryVotes) GetNegative() int32 {
	if m != nil {
		return m.Negative
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetPositive() int32 {
	if m != nil {
		return m.Positive
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetImportant() int32 {
	if m != nil {
		return m.Important
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLiked() int32 {
	if m != nil {
		return m.Liked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetDisliked() int32 {
	if m != nil {
		return m.Disliked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLol() int32 {
	if m != nil {
		return m.Lol
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetToxic() int32 {
	if m != nil {
		return m.Toxic
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetSaved() int32 {
	if m != nil {
		return m.Saved
	}
	return 0
}

type CryptopanicEntryMetadata struct {
	Message     string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CryptopanicEntryMetadata) Reset()                    { *m = CryptopanicEntryMetadata{} }
func (m *CryptopanicEntryMetadata) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicEntryMetadata) ProtoMessage()               {}
func (*CryptopanicEntryMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CryptopanicEntryMetadata) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CryptopanicEntryMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CryptopanicRawEntry struct {
	Kind        string                    `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Domain      string                    `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	Source      *CryptopanicEntrySource   `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Title       string                    `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	PublishedAt string                    `protobuf:"bytes,5,opt,name=published_at,json=publishedAt" json:"published_at,omitempty"`
	Slug        string                    `protobuf:"bytes,6,opt,name=slug" json:"slug,omitempty"`
	Id          int32                     `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	Url         string                    `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	CreatedAt   string                    `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Votes       *CryptopanicEntryVotes    `protobuf:"bytes,10,opt,name=votes" json:"votes,omitempty"`
	Metadata    *CryptopanicEntryMetadata `protobuf:"bytes,11,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CryptopanicRawEntry) Reset()                    { *m = CryptopanicRawEntry{} }
func (m *CryptopanicRawEntry) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicRawEntry) ProtoMessage()               {}
func (*CryptopanicRawEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CryptopanicRawEntry) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *CryptopanicRawEntry) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSource() *CryptopanicEntrySource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CryptopanicRawEntry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicRawEntry) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *CryptopanicRawEntry) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CryptopanicRawEntry) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CryptopanicRawEntry) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetVotes() *CryptopanicEntryVotes {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *CryptopanicRawEntry) GetMetadata() *CryptopanicEntryMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type CryptopanicFeed struct {
	Count   int32                  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Results []*CryptopanicRawEntry `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *CryptopanicFeed) Reset()                    { *m = CryptopanicFeed{} }
func (m *CryptopanicFeed) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicFeed) ProtoMessage()               {}
func (*CryptopanicFeed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CryptopanicFeed) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CryptopanicFeed) GetResults() []*CryptopanicRawEntry {
	if m != nil {
		return m.Results
	}
	return nil
}

type CryptopanicPost struct {
	CryptopanicRawEntry *CryptopanicRawEntry `protobuf:"bytes,1,opt,name=cryptopanic_raw_entry,json=cryptopanicRawEntry" json:"cryptopanic_raw_entry,omitempty"`
	Article             *Article             `protobuf:"bytes,2,opt,name=article" json:"article,omitempty"`
}

func (m *CryptopanicPost) Reset()                    { *m = CryptopanicPost{} }
func (m *CryptopanicPost) String() string            { return proto.CompactTextString(m) }
func (*CryptopanicPost) ProtoMessage()               {}
func (*CryptopanicPost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CryptopanicPost) GetCryptopanicRawEntry() *CryptopanicRawEntry {
	if m != nil {
		return m.CryptopanicRawEntry
	}
	return nil
}

func (m *CryptopanicPost) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

// *
// Occurrence od named entity.
// contains position, matched text, category
type NamedEntityOccurrence struct {
	// Represents NamedEntity element
	Label NamedEntity `protobuf:"varint,1,opt,name=label,enum=NamedEntity" json:"label,omitempty"`
	// Start position of occurrence
	Start uint32 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	// End position of occurrence
	End uint32 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
	// Matched text
	Text string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (m *NamedEntityOccurrence) Reset()                    { *m = NamedEntityOccurrence{} }
func (m *NamedEntityOccurrence) String() string            { return proto.CompactTextString(m) }
func (*NamedEntityOccurrence) ProtoMessage()               {}
func (*NamedEntityOccurrence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NamedEntityOccurrence) GetLabel() NamedEntity {
	if m != nil {
		return m.Label
	}
	return NamedEntity_ASSET_ENTITY
}

func (m *NamedEntityOccurrence) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *NamedEntityOccurrence) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *NamedEntityOccurrence) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// *
// Groups all types of named entities we support.
type NamedEntitiesModel struct {
	// list of crypto assets
	Symbols []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	// recognized cryptocurrencies
	Assets []*NamedEntityOccurrence `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	// recognized persons
	Persons []*NamedEntityOccurrence `protobuf:"bytes,3,rep,name=persons" json:"persons,omitempty"`
	// recognized companies
	Companies []*NamedEntityOccurrence `protobuf:"bytes,4,rep,name=companies" json:"companies,omitempty"`
	// recognized organizations
	Organizations []*NamedEntityOccurrence `protobuf:"bytes,5,rep,name=organizations" json:"organizations,omitempty"`
	// recognized locations
	Locations []*NamedEntityOccurrence `protobuf:"bytes,6,rep,name=locations" json:"locations,omitempty"`
	// recognized exchanges
	Exchanges []*NamedEntityOccurrence `protobuf:"bytes,7,rep,name=exchanges" json:"exchanges,omitempty"`
	// recognized misc objects
	Misc []*NamedEntityOccurrence `protobuf:"bytes,8,rep,name=misc" json:"misc,omitempty"`
	// list of assigned tags
	Tags []string `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
	// mapped asset to its mention count
	AssetMentions map[string]int32 `protobuf:"bytes,10,rep,name=asset_mentions,json=assetMentions" json:"asset_mentions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// cleaned text which uses NER
	SourceText string `protobuf:"bytes,11,opt,name=source_text,json=sourceText" json:"source_text,omitempty"`
}

func (m *NamedEntitiesModel) Reset()                    { *m = NamedEntitiesModel{} }
func (m *NamedEntitiesModel) String() string            { return proto.CompactTextString(m) }
func (*NamedEntitiesModel) ProtoMessage()               {}
func (*NamedEntitiesModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NamedEntitiesModel) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssets() []*NamedEntityOccurrence {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NamedEntitiesModel) GetPersons() []*NamedEntityOccurrence {
	if m != nil {
		return m.Persons
	}
	return nil
}

func (m *NamedEntitiesModel) GetCompanies() []*NamedEntityOccurrence {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *NamedEntitiesModel) GetOrganizations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *NamedEntitiesModel) GetLocations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *NamedEntitiesModel) GetExchanges() []*NamedEntityOccurrence {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

func (m *NamedEntitiesModel) GetMisc() []*NamedEntityOccurrence {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *NamedEntitiesModel) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssetMentions() map[string]int32 {
	if m != nil {
		return m.AssetMentions
	}
	return nil
}

func (m *NamedEntitiesModel) GetSourceText() string {
	if m != nil {
		return m.SourceText
	}
	return ""
}

// *
// Basic model for News, articles.
// It's weight depends on Alexa ranks
type Article struct {
	Base      *BaseModel      `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Sentiment *SentimentModel `protobuf:"bytes,2,opt,name=sentiment" json:"sentiment,omitempty"`
	// named entities from content
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities" json:"named_entities,omitempty"`
	// named entities from title
	TitleData *NamedEntitiesModel `protobuf:"bytes,4,opt,name=title_data,json=titleData" json:"title_data,omitempty"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (m *Article) String() string            { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Article) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Article) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Article) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *Article) GetTitleData() *NamedEntitiesModel {
	if m != nil {
		return m.TitleData
	}
	return nil
}

// *
// Basic model for media where the messages are wrote by regular user
type UserMessage struct {
	Base          *BaseModel          `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Sentiment     *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment" json:"sentiment,omitempty"`
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities" json:"named_entities,omitempty"`
	// nickname of user
	User string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	// text of message
	Message string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *UserMessage) Reset()                    { *m = UserMessage{} }
func (m *UserMessage) String() string            { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()               {}
func (*UserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserMessage) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserMessage) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *UserMessage) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *UserMessage) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// *
// User message from bitmex
type BitmexUserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage" json:"user_message,omitempty"`
}

func (m *BitmexUserMessage) Reset()                    { *m = BitmexUserMessage{} }
func (m *BitmexUserMessage) String() string            { return proto.CompactTextString(m) }
func (*BitmexUserMessage) ProtoMessage()               {}
func (*BitmexUserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BitmexUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

// *
// Message from telegram channel
// Weight is calculated from number of members in channel
type TelegramUserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage" json:"user_message,omitempty"`
	// symbols loaded from db
	SymbolsBackup []string `protobuf:"bytes,2,rep,name=symbols_backup,json=symbolsBackup" json:"symbols_backup,omitempty"`
	// telegram channel ID
	ChannelId int32 `protobuf:"varint,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// telegram channel members
	ChannelSubscriberCount int32 `protobuf:"varint,4,opt,name=channel_subscriber_count,json=channelSubscriberCount" json:"channel_subscriber_count,omitempty"`
	// telegram message ID
	MessageId int64 `protobuf:"varint,5,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *TelegramUserMessage) Reset()                    { *m = TelegramUserMessage{} }
func (m *TelegramUserMessage) String() string            { return proto.CompactTextString(m) }
func (*TelegramUserMessage) ProtoMessage()               {}
func (*TelegramUserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TelegramUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *TelegramUserMessage) GetSymbolsBackup() []string {
	if m != nil {
		return m.SymbolsBackup
	}
	return nil
}

func (m *TelegramUserMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TelegramUserMessage) GetChannelSubscriberCount() int32 {
	if m != nil {
		return m.ChannelSubscriberCount
	}
	return 0
}

func (m *TelegramUserMessage) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// *
// Message from discord chats
type DiscordUserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,1,opt,name=user_message,json=userMessage" json:"user_message,omitempty"`
	// unique ID of discord channel
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	GuildId   string `protobuf:"bytes,3,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
}

func (m *DiscordUserMessage) Reset()                    { *m = DiscordUserMessage{} }
func (m *DiscordUserMessage) String() string            { return proto.CompactTextString(m) }
func (*DiscordUserMessage) ProtoMessage()               {}
func (*DiscordUserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DiscordUserMessage) GetUserMessage() *UserMessage {
	if m != nil {
		return m.UserMessage
	}
	return nil
}

func (m *DiscordUserMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *DiscordUserMessage) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

// *
// Stores time/count snapshot of Reddit post comment count
// this is mainly for measuring amount of added comments during period of time
type CommentCountTimeSnapshot struct {
	Time         *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	CommentCount int32                      `protobuf:"varint,2,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
}

func (m *CommentCountTimeSnapshot) Reset()                    { *m = CommentCountTimeSnapshot{} }
func (m *CommentCountTimeSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CommentCountTimeSnapshot) ProtoMessage()               {}
func (*CommentCountTimeSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CommentCountTimeSnapshot) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CommentCountTimeSnapshot) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

// *
// Reddit comment
type Comment struct {
	ID         string     `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Permalink  string     `protobuf:"bytes,3,opt,name=permalink" json:"permalink,omitempty"`
	CreatedUTC uint64     `protobuf:"varint,4,opt,name=createdUTC" json:"createdUTC,omitempty"`
	Deleted    bool       `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	Ups        int32      `protobuf:"varint,14,opt,name=ups" json:"ups,omitempty"`
	Downs      int32      `protobuf:"varint,15,opt,name=downs" json:"downs,omitempty"`
	Likes      bool       `protobuf:"varint,16,opt,name=likes" json:"likes,omitempty"`
	Body       string     `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	Subreddit  string     `protobuf:"bytes,7,opt,name=subreddit" json:"subreddit,omitempty"`
	Replies    []*Comment `protobuf:"bytes,8,rep,name=replies" json:"replies,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Comment) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Comment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Comment) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Comment) GetCreatedUTC() uint64 {
	if m != nil {
		return m.CreatedUTC
	}
	return 0
}

func (m *Comment) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Comment) GetUps() int32 {
	if m != nil {
		return m.Ups
	}
	return 0
}

func (m *Comment) GetDowns() int32 {
	if m != nil {
		return m.Downs
	}
	return 0
}

func (m *Comment) GetLikes() bool {
	if m != nil {
		return m.Likes
	}
	return false
}

func (m *Comment) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Comment) GetSubreddit() string {
	if m != nil {
		return m.Subreddit
	}
	return ""
}

func (m *Comment) GetReplies() []*Comment {
	if m != nil {
		return m.Replies
	}
	return nil
}

// *
// Stores useful data from original reddit post
type RedditPostModel struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	CreatedUTC  uint64 `protobuf:"varint,2,opt,name=createdUTC" json:"createdUTC,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	URL         string `protobuf:"bytes,4,opt,name=URL,json=uRL" json:"URL,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author" json:"author,omitempty"`
	SelfText    string `protobuf:"bytes,6,opt,name=self_text,json=selfText" json:"self_text,omitempty"`
	Name        string `protobuf:"bytes,11,opt,name=name" json:"name,omitempty"`
	Permalink   string `protobuf:"bytes,12,opt,name=permalink" json:"permalink,omitempty"`
	Deleted     bool   `protobuf:"varint,13,opt,name=deleted" json:"deleted,omitempty"`
	Ups         int32  `protobuf:"varint,14,opt,name=ups" json:"ups,omitempty"`
	Downs       int32  `protobuf:"varint,15,opt,name=downs" json:"downs,omitempty"`
	Likes       bool   `protobuf:"varint,16,opt,name=likes" json:"likes,omitempty"`
	NumComments int32  `protobuf:"varint,17,opt,name=num_comments,json=numComments" json:"num_comments,omitempty"`
	Score       int32  `protobuf:"varint,18,opt,name=score" json:"score,omitempty"`
	// list of comments
	Replies []*Comment `protobuf:"bytes,19,rep,name=replies" json:"replies,omitempty"`
	Domain  string     `protobuf:"bytes,20,opt,name=domain" json:"domain,omitempty"`
	// unique ID of subreddit
	SubredditID         string `protobuf:"bytes,21,opt,name=SubredditID,json=subredditID" json:"SubredditID,omitempty"`
	Hidden              bool   `protobuf:"varint,22,opt,name=hidden" json:"hidden,omitempty"`
	Locked              bool   `protobuf:"varint,23,opt,name=locked" json:"locked,omitempty"`
	Thumbnail           string `protobuf:"bytes,24,opt,name=thumbnail" json:"thumbnail,omitempty"`
	Gilded              int32  `protobuf:"varint,25,opt,name=gilded" json:"gilded,omitempty"`
	Distinguished       string `protobuf:"bytes,26,opt,name=distinguished" json:"distinguished,omitempty"`
	Stickied            bool   `protobuf:"varint,27,opt,name=stickied" json:"stickied,omitempty"`
	IsRedditMediaDomain bool   `protobuf:"varint,28,opt,name=is_reddit_media_domain,json=isRedditMediaDomain" json:"is_reddit_media_domain,omitempty"`
	// time/count snapshot of Reddit post comment count
	CommentCountSnapshot []*CommentCountTimeSnapshot `protobuf:"bytes,7,rep,name=comment_count_snapshot,json=commentCountSnapshot" json:"comment_count_snapshot,omitempty"`
	// Reddit post actual hot rate in queue
	HotRate float64 `protobuf:"fixed64,8,opt,name=hot_rate,json=hotRate" json:"hot_rate,omitempty"`
	// Reference to parent subreddit
	Subreddit string `protobuf:"bytes,9,opt,name=subreddit" json:"subreddit,omitempty"`
	IsSelf    bool   `protobuf:"varint,10,opt,name=is_self,json=isSelf" json:"is_self,omitempty"`
	Nsfw      bool   `protobuf:"varint,29,opt,name=nsfw" json:"nsfw,omitempty"`
}

func (m *RedditPostModel) Reset()                    { *m = RedditPostModel{} }
func (m *RedditPostModel) String() string            { return proto.CompactTextString(m) }
func (*RedditPostModel) ProtoMessage()               {}
func (*RedditPostModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RedditPostModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RedditPostModel) GetCreatedUTC() uint64 {
	if m != nil {
		return m.CreatedUTC
	}
	return 0
}

func (m *RedditPostModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RedditPostModel) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *RedditPostModel) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *RedditPostModel) GetSelfText() string {
	if m != nil {
		return m.SelfText
	}
	return ""
}

func (m *RedditPostModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RedditPostModel) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *RedditPostModel) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *RedditPostModel) GetUps() int32 {
	if m != nil {
		return m.Ups
	}
	return 0
}

func (m *RedditPostModel) GetDowns() int32 {
	if m != nil {
		return m.Downs
	}
	return 0
}

func (m *RedditPostModel) GetLikes() bool {
	if m != nil {
		return m.Likes
	}
	return false
}

func (m *RedditPostModel) GetNumComments() int32 {
	if m != nil {
		return m.NumComments
	}
	return 0
}

func (m *RedditPostModel) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RedditPostModel) GetReplies() []*Comment {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (m *RedditPostModel) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RedditPostModel) GetSubredditID() string {
	if m != nil {
		return m.SubredditID
	}
	return ""
}

func (m *RedditPostModel) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *RedditPostModel) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *RedditPostModel) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *RedditPostModel) GetGilded() int32 {
	if m != nil {
		return m.Gilded
	}
	return 0
}

func (m *RedditPostModel) GetDistinguished() string {
	if m != nil {
		return m.Distinguished
	}
	return ""
}

func (m *RedditPostModel) GetStickied() bool {
	if m != nil {
		return m.Stickied
	}
	return false
}

func (m *RedditPostModel) GetIsRedditMediaDomain() bool {
	if m != nil {
		return m.IsRedditMediaDomain
	}
	return false
}

func (m *RedditPostModel) GetCommentCountSnapshot() []*CommentCountTimeSnapshot {
	if m != nil {
		return m.CommentCountSnapshot
	}
	return nil
}

func (m *RedditPostModel) GetHotRate() float64 {
	if m != nil {
		return m.HotRate
	}
	return 0
}

func (m *RedditPostModel) GetSubreddit() string {
	if m != nil {
		return m.Subreddit
	}
	return ""
}

func (m *RedditPostModel) GetIsSelf() bool {
	if m != nil {
		return m.IsSelf
	}
	return false
}

func (m *RedditPostModel) GetNsfw() bool {
	if m != nil {
		return m.Nsfw
	}
	return false
}

type RedditPost struct {
	Base      *BaseModel      `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Sentiment *SentimentModel `protobuf:"bytes,2,opt,name=sentiment" json:"sentiment,omitempty"`
	// named entities from content
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities" json:"named_entities,omitempty"`
	// named entities from title
	TitleData *NamedEntitiesModel `protobuf:"bytes,4,opt,name=title_data,json=titleData" json:"title_data,omitempty"`
	// data from original reddit post
	RedditPost *RedditPostModel `protobuf:"bytes,5,opt,name=reddit_post,json=redditPost" json:"reddit_post,omitempty"`
}

func (m *RedditPost) Reset()                    { *m = RedditPost{} }
func (m *RedditPost) String() string            { return proto.CompactTextString(m) }
func (*RedditPost) ProtoMessage()               {}
func (*RedditPost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RedditPost) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *RedditPost) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *RedditPost) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *RedditPost) GetTitleData() *NamedEntitiesModel {
	if m != nil {
		return m.TitleData
	}
	return nil
}

func (m *RedditPost) GetRedditPost() *RedditPostModel {
	if m != nil {
		return m.RedditPost
	}
	return nil
}

// *
// Stores some useful data form original tweet
type ExtendedTweet struct {
	FavouriteCount            int32    `protobuf:"varint,1,opt,name=favourite_count,json=favouriteCount" json:"favourite_count,omitempty"`
	FilterLevel               string   `protobuf:"bytes,2,opt,name=filter_level,json=filterLevel" json:"filter_level,omitempty"`
	IdStr                     string   `protobuf:"bytes,3,opt,name=id_str,json=idStr" json:"id_str,omitempty"`
	InReplyToScreenName       string   `protobuf:"bytes,4,opt,name=in_reply_to_screen_name,json=inReplyToScreenName" json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusIdStr      string   `protobuf:"bytes,5,opt,name=in_reply_to_status_id_str,json=inReplyToStatusIdStr" json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserIdStr        string   `protobuf:"bytes,6,opt,name=in_reply_to_user_id_str,json=inReplyToUserIdStr" json:"in_reply_to_user_id_str,omitempty"`
	IsQuoteStatus             string   `protobuf:"bytes,7,opt,name=is_quote_status,json=isQuoteStatus" json:"is_quote_status,omitempty"`
	Lang                      string   `protobuf:"bytes,8,opt,name=lang" json:"lang,omitempty"`
	PossiblySensitive         bool     `protobuf:"varint,9,opt,name=possibly_sensitive,json=possiblySensitive" json:"possibly_sensitive,omitempty"`
	QuoteCount                int32    `protobuf:"varint,10,opt,name=quote_count,json=quoteCount" json:"quote_count,omitempty"`
	ReplyCount                int32    `protobuf:"varint,11,opt,name=reply_count,json=replyCount" json:"reply_count,omitempty"`
	RetweetCount              int32    `protobuf:"varint,12,opt,name=retweet_count,json=retweetCount" json:"retweet_count,omitempty"`
	UserMentions              []string `protobuf:"bytes,13,rep,name=user_mentions,json=userMentions" json:"user_mentions,omitempty"`
	Source                    string   `protobuf:"bytes,14,opt,name=source" json:"source,omitempty"`
	AuthorCreatedAt           string   `protobuf:"bytes,15,opt,name=author_created_at,json=authorCreatedAt" json:"author_created_at,omitempty"`
	AuthorDefaultProfile      bool     `protobuf:"varint,16,opt,name=author_default_profile,json=authorDefaultProfile" json:"author_default_profile,omitempty"`
	AuthorDefaultProfileImage bool     `protobuf:"varint,17,opt,name=author_default_profile_image,json=authorDefaultProfileImage" json:"author_default_profile_image,omitempty"`
	AuthorFollowersCount      int32    `protobuf:"varint,18,opt,name=author_followers_count,json=authorFollowersCount" json:"author_followers_count,omitempty"`
	AuthorFriendsCount        int32    `protobuf:"varint,19,opt,name=author_friends_count,json=authorFriendsCount" json:"author_friends_count,omitempty"`
	AuthorIdStr               string   `protobuf:"bytes,20,opt,name=author_id_str,json=authorIdStr" json:"author_id_str,omitempty"`
	AuthorLang                string   `protobuf:"bytes,21,opt,name=author_lang,json=authorLang" json:"author_lang,omitempty"`
	AuthorLocation            string   `protobuf:"bytes,22,opt,name=author_location,json=authorLocation" json:"author_location,omitempty"`
	AuthorName                string   `protobuf:"bytes,23,opt,name=author_name,json=authorName" json:"author_name,omitempty"`
	AuthorScreenName          string   `protobuf:"bytes,24,opt,name=author_screen_name,json=authorScreenName" json:"author_screen_name,omitempty"`
	AuthorProfileImageUrlHttp string   `protobuf:"bytes,25,opt,name=author_profile_image_url_http,json=authorProfileImageUrlHttp" json:"author_profile_image_url_http,omitempty"`
	AuthorStatusesCount       int32    `protobuf:"varint,26,opt,name=author_statuses_count,json=authorStatusesCount" json:"author_statuses_count,omitempty"`
	Categories                []string `protobuf:"bytes,27,rep,name=categories" json:"categories,omitempty"`
	Truncated                 bool     `protobuf:"varint,28,opt,name=truncated" json:"truncated,omitempty"`
	FullText                  string   `protobuf:"bytes,29,opt,name=full_text,json=fullText" json:"full_text,omitempty"`
}

func (m *ExtendedTweet) Reset()                    { *m = ExtendedTweet{} }
func (m *ExtendedTweet) String() string            { return proto.CompactTextString(m) }
func (*ExtendedTweet) ProtoMessage()               {}
func (*ExtendedTweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ExtendedTweet) GetFavouriteCount() int32 {
	if m != nil {
		return m.FavouriteCount
	}
	return 0
}

func (m *ExtendedTweet) GetFilterLevel() string {
	if m != nil {
		return m.FilterLevel
	}
	return ""
}

func (m *ExtendedTweet) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToScreenName() string {
	if m != nil {
		return m.InReplyToScreenName
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToStatusIdStr() string {
	if m != nil {
		return m.InReplyToStatusIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetInReplyToUserIdStr() string {
	if m != nil {
		return m.InReplyToUserIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetIsQuoteStatus() string {
	if m != nil {
		return m.IsQuoteStatus
	}
	return ""
}

func (m *ExtendedTweet) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ExtendedTweet) GetPossiblySensitive() bool {
	if m != nil {
		return m.PossiblySensitive
	}
	return false
}

func (m *ExtendedTweet) GetQuoteCount() int32 {
	if m != nil {
		return m.QuoteCount
	}
	return 0
}

func (m *ExtendedTweet) GetReplyCount() int32 {
	if m != nil {
		return m.ReplyCount
	}
	return 0
}

func (m *ExtendedTweet) GetRetweetCount() int32 {
	if m != nil {
		return m.RetweetCount
	}
	return 0
}

func (m *ExtendedTweet) GetUserMentions() []string {
	if m != nil {
		return m.UserMentions
	}
	return nil
}

func (m *ExtendedTweet) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorCreatedAt() string {
	if m != nil {
		return m.AuthorCreatedAt
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorDefaultProfile() bool {
	if m != nil {
		return m.AuthorDefaultProfile
	}
	return false
}

func (m *ExtendedTweet) GetAuthorDefaultProfileImage() bool {
	if m != nil {
		return m.AuthorDefaultProfileImage
	}
	return false
}

func (m *ExtendedTweet) GetAuthorFollowersCount() int32 {
	if m != nil {
		return m.AuthorFollowersCount
	}
	return 0
}

func (m *ExtendedTweet) GetAuthorFriendsCount() int32 {
	if m != nil {
		return m.AuthorFriendsCount
	}
	return 0
}

func (m *ExtendedTweet) GetAuthorIdStr() string {
	if m != nil {
		return m.AuthorIdStr
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorLang() string {
	if m != nil {
		return m.AuthorLang
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorLocation() string {
	if m != nil {
		return m.AuthorLocation
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorScreenName() string {
	if m != nil {
		return m.AuthorScreenName
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorProfileImageUrlHttp() string {
	if m != nil {
		return m.AuthorProfileImageUrlHttp
	}
	return ""
}

func (m *ExtendedTweet) GetAuthorStatusesCount() int32 {
	if m != nil {
		return m.AuthorStatusesCount
	}
	return 0
}

func (m *ExtendedTweet) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *ExtendedTweet) GetTruncated() bool {
	if m != nil {
		return m.Truncated
	}
	return false
}

func (m *ExtendedTweet) GetFullText() string {
	if m != nil {
		return m.FullText
	}
	return ""
}

type Tweet struct {
	Base          *BaseModel          `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Sentiment     *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment" json:"sentiment,omitempty"`
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities" json:"named_entities,omitempty"`
	// data from original tweet
	ExtendedTweet *ExtendedTweet `protobuf:"bytes,4,opt,name=extended_tweet,json=extendedTweet" json:"extended_tweet,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Tweet) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Tweet) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Tweet) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *Tweet) GetExtendedTweet() *ExtendedTweet {
	if m != nil {
		return m.ExtendedTweet
	}
	return nil
}

// *
// Sentiment message holds informations about aggregated sentiment for specific time window.
// It is emitted every second for each asset and resolution. If your application needs to receive
// sentiment updates for only one specific asset, it need to be filtered on your side .
type SentimentCandle struct {
	// unique identifier
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// timestamp representing start of the time frame
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// constant representing time frame width - M1 or H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution" json:"resolution,omitempty"`
	// crypto asset
	Asset string `protobuf:"bytes,4,opt,name=asset" json:"asset,omitempty"`
	// sum of all negative values
	NegativeSum float64 `protobuf:"fixed64,5,opt,name=negative_sum,json=negativeSum" json:"negative_sum,omitempty"`
	// counted negative occurrences
	NegativeCount int32 `protobuf:"varint,6,opt,name=negative_count,json=negativeCount" json:"negative_count,omitempty"`
	// sum of all positive values
	PositiveSum float64 `protobuf:"fixed64,7,opt,name=positive_sum,json=positiveSum" json:"positive_sum,omitempty"`
	// counted positive occurrences
	PositiveCount int32 `protobuf:"varint,8,opt,name=positive_count,json=positiveCount" json:"positive_count,omitempty"`
	// average of sentiments
	SentimentAvg float64 `protobuf:"fixed64,9,opt,name=sentiment_avg,json=sentimentAvg" json:"sentiment_avg,omitempty"`
	// value of sentiment at the start of candle
	OpenSentimentAverage float64 `protobuf:"fixed64,10,opt,name=open_sentiment_average,json=openSentimentAverage" json:"open_sentiment_average,omitempty"`
	// value of sentiment when the candle is highest
	HighSentimentAverage float64 `protobuf:"fixed64,11,opt,name=high_sentiment_average,json=highSentimentAverage" json:"high_sentiment_average,omitempty"`
	// value of sentiment when the candle is lowest
	LowSentimentAverage float64 `protobuf:"fixed64,12,opt,name=low_sentiment_average,json=lowSentimentAverage" json:"low_sentiment_average,omitempty"`
	// value of sentiment at the end of candle
	CloseSentimentAverage float64 `protobuf:"fixed64,13,opt,name=close_sentiment_average,json=closeSentimentAverage" json:"close_sentiment_average,omitempty"`
	// flag the signalizes that candle was updated
	Updated bool `protobuf:"varint,14,opt,name=updated" json:"updated,omitempty"`
}

func (m *SentimentCandle) Reset()                    { *m = SentimentCandle{} }
func (m *SentimentCandle) String() string            { return proto.CompactTextString(m) }
func (*SentimentCandle) ProtoMessage()               {}
func (*SentimentCandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SentimentCandle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SentimentCandle) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *SentimentCandle) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentCandle) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *SentimentCandle) GetNegativeSum() float64 {
	if m != nil {
		return m.NegativeSum
	}
	return 0
}

func (m *SentimentCandle) GetNegativeCount() int32 {
	if m != nil {
		return m.NegativeCount
	}
	return 0
}

func (m *SentimentCandle) GetPositiveSum() float64 {
	if m != nil {
		return m.PositiveSum
	}
	return 0
}

func (m *SentimentCandle) GetPositiveCount() int32 {
	if m != nil {
		return m.PositiveCount
	}
	return 0
}

func (m *SentimentCandle) GetSentimentAvg() float64 {
	if m != nil {
		return m.SentimentAvg
	}
	return 0
}

func (m *SentimentCandle) GetOpenSentimentAverage() float64 {
	if m != nil {
		return m.OpenSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetHighSentimentAverage() float64 {
	if m != nil {
		return m.HighSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetLowSentimentAverage() float64 {
	if m != nil {
		return m.LowSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetCloseSentimentAverage() float64 {
	if m != nil {
		return m.CloseSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type AssetsFilter struct {
	// name of the asset - ie. BTC
	Assets    []string `protobuf:"bytes,4,rep,name=assets" json:"assets,omitempty"`
	AllAssets bool     `protobuf:"varint,5,opt,name=all_assets,json=allAssets" json:"all_assets,omitempty"`
}

func (m *AssetsFilter) Reset()                    { *m = AssetsFilter{} }
func (m *AssetsFilter) String() string            { return proto.CompactTextString(m) }
func (*AssetsFilter) ProtoMessage()               {}
func (*AssetsFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AssetsFilter) GetAssets() []string {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *AssetsFilter) GetAllAssets() bool {
	if m != nil {
		return m.AllAssets
	}
	return false
}

type AggregationCandleFilter struct {
	// resolution for candle - M1/H1
	Resolution   string        `protobuf:"bytes,1,opt,name=resolution" json:"resolution,omitempty"`
	AssetsFilter *AssetsFilter `protobuf:"bytes,2,opt,name=assets_filter,json=assetsFilter" json:"assets_filter,omitempty"`
}

func (m *AggregationCandleFilter) Reset()                    { *m = AggregationCandleFilter{} }
func (m *AggregationCandleFilter) String() string            { return proto.CompactTextString(m) }
func (*AggregationCandleFilter) ProtoMessage()               {}
func (*AggregationCandleFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AggregationCandleFilter) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *AggregationCandleFilter) GetAssetsFilter() *AssetsFilter {
	if m != nil {
		return m.AssetsFilter
	}
	return nil
}

// *
// Each request for historic data should be limited by date
type SentimentHistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	// resolution for candle - M1/H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution" json:"resolution,omitempty"`
	// name of the asset - ie. BTC
	Asset string `protobuf:"bytes,4,opt,name=asset" json:"asset,omitempty"`
}

func (m *SentimentHistoricRequest) Reset()                    { *m = SentimentHistoricRequest{} }
func (m *SentimentHistoricRequest) String() string            { return proto.CompactTextString(m) }
func (*SentimentHistoricRequest) ProtoMessage()               {}
func (*SentimentHistoricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SentimentHistoricRequest) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SentimentHistoricRequest) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SentimentHistoricRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentHistoricRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// *
// Each request for historic data should be limited by date
type HistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Filter *AssetsFilter              `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
}

func (m *HistoricRequest) Reset()                    { *m = HistoricRequest{} }
func (m *HistoricRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoricRequest) ProtoMessage()               {}
func (*HistoricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *HistoricRequest) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *HistoricRequest) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HistoricRequest) GetFilter() *AssetsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// represent one asset
type Asset struct {
	// symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type AssetItems struct {
	Assets []*Asset `protobuf:"bytes,1,rep,name=assets" json:"assets,omitempty"`
}

func (m *AssetItems) Reset()                    { *m = AssetItems{} }
func (m *AssetItems) String() string            { return proto.CompactTextString(m) }
func (*AssetItems) ProtoMessage()               {}
func (*AssetItems) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AssetItems) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type AggId struct {
	Year   int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month  int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day    int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour   int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
}

func (m *AggId) Reset()                    { *m = AggId{} }
func (m *AggId) String() string            { return proto.CompactTextString(m) }
func (*AggId) ProtoMessage()               {}
func (*AggId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AggId) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *AggId) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *AggId) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *AggId) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *AggId) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

type AggregationCandle struct {
	Id         *AggId  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Asset      string  `protobuf:"bytes,2,opt,name=asset" json:"asset,omitempty"`
	Resolution string  `protobuf:"bytes,3,opt,name=resolution" json:"resolution,omitempty"`
	Pv         int64   `protobuf:"varint,4,opt,name=pv" json:"pv,omitempty"`
	Nv         int64   `protobuf:"varint,5,opt,name=nv" json:"nv,omitempty"`
	Ps         float64 `protobuf:"fixed64,6,opt,name=ps" json:"ps,omitempty"`
	Ns         float64 `protobuf:"fixed64,7,opt,name=ns" json:"ns,omitempty"`
	A          float64 `protobuf:"fixed64,8,opt,name=a" json:"a,omitempty"`
}

func (m *AggregationCandle) Reset()                    { *m = AggregationCandle{} }
func (m *AggregationCandle) String() string            { return proto.CompactTextString(m) }
func (*AggregationCandle) ProtoMessage()               {}
func (*AggregationCandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AggregationCandle) GetId() *AggId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AggregationCandle) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *AggregationCandle) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *AggregationCandle) GetPv() int64 {
	if m != nil {
		return m.Pv
	}
	return 0
}

func (m *AggregationCandle) GetNv() int64 {
	if m != nil {
		return m.Nv
	}
	return 0
}

func (m *AggregationCandle) GetPs() float64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *AggregationCandle) GetNs() float64 {
	if m != nil {
		return m.Ns
	}
	return 0
}

func (m *AggregationCandle) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseModel)(nil), "BaseModel")
	proto.RegisterType((*SentimentModel)(nil), "SentimentModel")
	proto.RegisterType((*CryptopanicEntrySource)(nil), "CryptopanicEntrySource")
	proto.RegisterType((*CryptopanicEntryVotes)(nil), "CryptopanicEntryVotes")
	proto.RegisterType((*CryptopanicEntryMetadata)(nil), "CryptopanicEntryMetadata")
	proto.RegisterType((*CryptopanicRawEntry)(nil), "CryptopanicRawEntry")
	proto.RegisterType((*CryptopanicFeed)(nil), "CryptopanicFeed")
	proto.RegisterType((*CryptopanicPost)(nil), "CryptopanicPost")
	proto.RegisterType((*NamedEntityOccurrence)(nil), "NamedEntityOccurrence")
	proto.RegisterType((*NamedEntitiesModel)(nil), "NamedEntitiesModel")
	proto.RegisterType((*Article)(nil), "Article")
	proto.RegisterType((*UserMessage)(nil), "UserMessage")
	proto.RegisterType((*BitmexUserMessage)(nil), "BitmexUserMessage")
	proto.RegisterType((*TelegramUserMessage)(nil), "TelegramUserMessage")
	proto.RegisterType((*DiscordUserMessage)(nil), "DiscordUserMessage")
	proto.RegisterType((*CommentCountTimeSnapshot)(nil), "CommentCountTimeSnapshot")
	proto.RegisterType((*Comment)(nil), "Comment")
	proto.RegisterType((*RedditPostModel)(nil), "RedditPostModel")
	proto.RegisterType((*RedditPost)(nil), "RedditPost")
	proto.RegisterType((*ExtendedTweet)(nil), "ExtendedTweet")
	proto.RegisterType((*Tweet)(nil), "Tweet")
	proto.RegisterType((*SentimentCandle)(nil), "SentimentCandle")
	proto.RegisterType((*AssetsFilter)(nil), "AssetsFilter")
	proto.RegisterType((*AggregationCandleFilter)(nil), "AggregationCandleFilter")
	proto.RegisterType((*SentimentHistoricRequest)(nil), "SentimentHistoricRequest")
	proto.RegisterType((*HistoricRequest)(nil), "HistoricRequest")
	proto.RegisterType((*Asset)(nil), "Asset")
	proto.RegisterType((*AssetItems)(nil), "AssetItems")
	proto.RegisterType((*AggId)(nil), "AggId")
	proto.RegisterType((*AggregationCandle)(nil), "AggregationCandle")
	proto.RegisterEnum("NamedEntity", NamedEntity_name, NamedEntity_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessagesProxy service

type MessagesProxyClient interface {
	SubscribeArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error)
	SubscribeTweet(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeTweetClient, error)
	SubscribeReddit(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeRedditClient, error)
	SubscribeDiscord(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeDiscordClient, error)
	SubscribeTelegram(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeTelegramClient, error)
	SubscribeBitmex(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeBitmexClient, error)
}

type messagesProxyClient struct {
	cc *grpc.ClientConn
}

func NewMessagesProxyClient(cc *grpc.ClientConn) MessagesProxyClient {
	return &messagesProxyClient{cc}
}

func (c *messagesProxyClient) SubscribeArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[0], c.cc, "/MessagesProxy/SubscribeArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeArticleClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type messagesProxySubscribeArticleClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeArticleClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeTweet(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeTweetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[1], c.cc, "/MessagesProxy/SubscribeTweet", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeTweetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeTweetClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type messagesProxySubscribeTweetClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeTweetClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeReddit(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeRedditClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[2], c.cc, "/MessagesProxy/SubscribeReddit", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeRedditClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeRedditClient interface {
	Recv() (*RedditPost, error)
	grpc.ClientStream
}

type messagesProxySubscribeRedditClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeRedditClient) Recv() (*RedditPost, error) {
	m := new(RedditPost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeDiscord(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeDiscordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[3], c.cc, "/MessagesProxy/SubscribeDiscord", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeDiscordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeDiscordClient interface {
	Recv() (*DiscordUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeDiscordClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeDiscordClient) Recv() (*DiscordUserMessage, error) {
	m := new(DiscordUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeTelegram(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeTelegramClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[4], c.cc, "/MessagesProxy/SubscribeTelegram", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeTelegramClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeTelegramClient interface {
	Recv() (*TelegramUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeTelegramClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeTelegramClient) Recv() (*TelegramUserMessage, error) {
	m := new(TelegramUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeBitmex(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeBitmexClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessagesProxy_serviceDesc.Streams[5], c.cc, "/MessagesProxy/SubscribeBitmex", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeBitmexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeBitmexClient interface {
	Recv() (*BitmexUserMessage, error)
	grpc.ClientStream
}

type messagesProxySubscribeBitmexClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeBitmexClient) Recv() (*BitmexUserMessage, error) {
	m := new(BitmexUserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessagesProxy service

type MessagesProxyServer interface {
	SubscribeArticle(*AssetsFilter, MessagesProxy_SubscribeArticleServer) error
	SubscribeTweet(*AssetsFilter, MessagesProxy_SubscribeTweetServer) error
	SubscribeReddit(*AssetsFilter, MessagesProxy_SubscribeRedditServer) error
	SubscribeDiscord(*AssetsFilter, MessagesProxy_SubscribeDiscordServer) error
	SubscribeTelegram(*AssetsFilter, MessagesProxy_SubscribeTelegramServer) error
	SubscribeBitmex(*AssetsFilter, MessagesProxy_SubscribeBitmexServer) error
}

func RegisterMessagesProxyServer(s *grpc.Server, srv MessagesProxyServer) {
	s.RegisterService(&_MessagesProxy_serviceDesc, srv)
}

func _MessagesProxy_SubscribeArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeArticle(m, &messagesProxySubscribeArticleServer{stream})
}

type MessagesProxy_SubscribeArticleServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type messagesProxySubscribeArticleServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeArticleServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeTweet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeTweet(m, &messagesProxySubscribeTweetServer{stream})
}

type MessagesProxy_SubscribeTweetServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type messagesProxySubscribeTweetServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeTweetServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeReddit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeReddit(m, &messagesProxySubscribeRedditServer{stream})
}

type MessagesProxy_SubscribeRedditServer interface {
	Send(*RedditPost) error
	grpc.ServerStream
}

type messagesProxySubscribeRedditServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeRedditServer) Send(m *RedditPost) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeDiscord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeDiscord(m, &messagesProxySubscribeDiscordServer{stream})
}

type MessagesProxy_SubscribeDiscordServer interface {
	Send(*DiscordUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeDiscordServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeDiscordServer) Send(m *DiscordUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeTelegram_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeTelegram(m, &messagesProxySubscribeTelegramServer{stream})
}

type MessagesProxy_SubscribeTelegramServer interface {
	Send(*TelegramUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeTelegramServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeTelegramServer) Send(m *TelegramUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeBitmex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeBitmex(m, &messagesProxySubscribeBitmexServer{stream})
}

type MessagesProxy_SubscribeBitmexServer interface {
	Send(*BitmexUserMessage) error
	grpc.ServerStream
}

type messagesProxySubscribeBitmexServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeBitmexServer) Send(m *BitmexUserMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _MessagesProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MessagesProxy",
	HandlerType: (*MessagesProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeArticle",
			Handler:       _MessagesProxy_SubscribeArticle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTweet",
			Handler:       _MessagesProxy_SubscribeTweet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeReddit",
			Handler:       _MessagesProxy_SubscribeReddit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeDiscord",
			Handler:       _MessagesProxy_SubscribeDiscord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTelegram",
			Handler:       _MessagesProxy_SubscribeTelegram_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBitmex",
			Handler:       _MessagesProxy_SubscribeBitmex_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// Client API for Dataset service

type DatasetClient interface {
	Assets(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*AssetItems, error)
}

type datasetClient struct {
	cc *grpc.ClientConn
}

func NewDatasetClient(cc *grpc.ClientConn) DatasetClient {
	return &datasetClient{cc}
}

func (c *datasetClient) Assets(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*AssetItems, error) {
	out := new(AssetItems)
	err := grpc.Invoke(ctx, "/Dataset/Assets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dataset service

type DatasetServer interface {
	Assets(context.Context, *google_protobuf1.Empty) (*AssetItems, error)
}

func RegisterDatasetServer(s *grpc.Server, srv DatasetServer) {
	s.RegisterService(&_Dataset_serviceDesc, srv)
}

func _Dataset_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dataset/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServer).Assets(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dataset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dataset",
	HandlerType: (*DatasetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assets",
			Handler:    _Dataset_Assets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// Client API for HistoricData service

type HistoricDataClient interface {
	HistoricTweets(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricTweetsClient, error)
	HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricArticlesClient, error)
	HistoricRedditPosts(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricRedditPostsClient, error)
}

type historicDataClient struct {
	cc *grpc.ClientConn
}

func NewHistoricDataClient(cc *grpc.ClientConn) HistoricDataClient {
	return &historicDataClient{cc}
}

func (c *historicDataClient) HistoricTweets(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricTweetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HistoricData_serviceDesc.Streams[0], c.cc, "/HistoricData/HistoricTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &historicDataHistoricTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoricData_HistoricTweetsClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type historicDataHistoricTweetsClient struct {
	grpc.ClientStream
}

func (x *historicDataHistoricTweetsClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *historicDataClient) HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricArticlesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HistoricData_serviceDesc.Streams[1], c.cc, "/HistoricData/HistoricArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &historicDataHistoricArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoricData_HistoricArticlesClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type historicDataHistoricArticlesClient struct {
	grpc.ClientStream
}

func (x *historicDataHistoricArticlesClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *historicDataClient) HistoricRedditPosts(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricRedditPostsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HistoricData_serviceDesc.Streams[2], c.cc, "/HistoricData/HistoricRedditPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &historicDataHistoricRedditPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoricData_HistoricRedditPostsClient interface {
	Recv() (*RedditPost, error)
	grpc.ClientStream
}

type historicDataHistoricRedditPostsClient struct {
	grpc.ClientStream
}

func (x *historicDataHistoricRedditPostsClient) Recv() (*RedditPost, error) {
	m := new(RedditPost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HistoricData service

type HistoricDataServer interface {
	HistoricTweets(*HistoricRequest, HistoricData_HistoricTweetsServer) error
	HistoricArticles(*HistoricRequest, HistoricData_HistoricArticlesServer) error
	HistoricRedditPosts(*HistoricRequest, HistoricData_HistoricRedditPostsServer) error
}

func RegisterHistoricDataServer(s *grpc.Server, srv HistoricDataServer) {
	s.RegisterService(&_HistoricData_serviceDesc, srv)
}

func _HistoricData_HistoricTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoricDataServer).HistoricTweets(m, &historicDataHistoricTweetsServer{stream})
}

type HistoricData_HistoricTweetsServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type historicDataHistoricTweetsServer struct {
	grpc.ServerStream
}

func (x *historicDataHistoricTweetsServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

func _HistoricData_HistoricArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoricDataServer).HistoricArticles(m, &historicDataHistoricArticlesServer{stream})
}

type HistoricData_HistoricArticlesServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type historicDataHistoricArticlesServer struct {
	grpc.ServerStream
}

func (x *historicDataHistoricArticlesServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

func _HistoricData_HistoricRedditPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoricDataServer).HistoricRedditPosts(m, &historicDataHistoricRedditPostsServer{stream})
}

type HistoricData_HistoricRedditPostsServer interface {
	Send(*RedditPost) error
	grpc.ServerStream
}

type historicDataHistoricRedditPostsServer struct {
	grpc.ServerStream
}

func (x *historicDataHistoricRedditPostsServer) Send(m *RedditPost) error {
	return x.ServerStream.SendMsg(m)
}

var _HistoricData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HistoricData",
	HandlerType: (*HistoricDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HistoricTweets",
			Handler:       _HistoricData_HistoricTweets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricArticles",
			Handler:       _HistoricData_HistoricArticles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricRedditPosts",
			Handler:       _HistoricData_HistoricRedditPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// Client API for Sentiments service

type SentimentsClient interface {
	HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricSocialSentimentClient, error)
	HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricNewsSentimentClient, error)
	SubscribeSocialSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeSocialSentimentClient, error)
	SubscribeNewsSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeNewsSentimentClient, error)
}

type sentimentsClient struct {
	cc *grpc.ClientConn
}

func NewSentimentsClient(cc *grpc.ClientConn) SentimentsClient {
	return &sentimentsClient{cc}
}

func (c *sentimentsClient) HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricSocialSentimentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sentiments_serviceDesc.Streams[0], c.cc, "/Sentiments/HistoricSocialSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsHistoricSocialSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_HistoricSocialSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsHistoricSocialSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsHistoricSocialSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricNewsSentimentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sentiments_serviceDesc.Streams[1], c.cc, "/Sentiments/HistoricNewsSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsHistoricNewsSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_HistoricNewsSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsHistoricNewsSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsHistoricNewsSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) SubscribeSocialSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeSocialSentimentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sentiments_serviceDesc.Streams[2], c.cc, "/Sentiments/SubscribeSocialSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsSubscribeSocialSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_SubscribeSocialSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsSubscribeSocialSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsSubscribeSocialSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) SubscribeNewsSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeNewsSentimentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sentiments_serviceDesc.Streams[3], c.cc, "/Sentiments/SubscribeNewsSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsSubscribeNewsSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_SubscribeNewsSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsSubscribeNewsSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsSubscribeNewsSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sentiments service

type SentimentsServer interface {
	HistoricSocialSentiment(*SentimentHistoricRequest, Sentiments_HistoricSocialSentimentServer) error
	HistoricNewsSentiment(*SentimentHistoricRequest, Sentiments_HistoricNewsSentimentServer) error
	SubscribeSocialSentiment(*AggregationCandleFilter, Sentiments_SubscribeSocialSentimentServer) error
	SubscribeNewsSentiment(*AggregationCandleFilter, Sentiments_SubscribeNewsSentimentServer) error
}

func RegisterSentimentsServer(s *grpc.Server, srv SentimentsServer) {
	s.RegisterService(&_Sentiments_serviceDesc, srv)
}

func _Sentiments_HistoricSocialSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SentimentHistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).HistoricSocialSentiment(m, &sentimentsHistoricSocialSentimentServer{stream})
}

type Sentiments_HistoricSocialSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsHistoricSocialSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsHistoricSocialSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_HistoricNewsSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SentimentHistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).HistoricNewsSentiment(m, &sentimentsHistoricNewsSentimentServer{stream})
}

type Sentiments_HistoricNewsSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsHistoricNewsSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsHistoricNewsSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_SubscribeSocialSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregationCandleFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).SubscribeSocialSentiment(m, &sentimentsSubscribeSocialSentimentServer{stream})
}

type Sentiments_SubscribeSocialSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsSubscribeSocialSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsSubscribeSocialSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_SubscribeNewsSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregationCandleFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).SubscribeNewsSentiment(m, &sentimentsSubscribeNewsSentimentServer{stream})
}

type Sentiments_SubscribeNewsSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsSubscribeNewsSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsSubscribeNewsSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

var _Sentiments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sentiments",
	HandlerType: (*SentimentsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HistoricSocialSentiment",
			Handler:       _Sentiments_HistoricSocialSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricNewsSentiment",
			Handler:       _Sentiments_HistoricNewsSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSocialSentiment",
			Handler:       _Sentiments_SubscribeSocialSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewsSentiment",
			Handler:       _Sentiments_SubscribeNewsSentiment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x19, 0xcb, 0x72, 0x24, 0x47,
	0xd1, 0x3d, 0x9a, 0xd1, 0x68, 0x72, 0x1e, 0xd2, 0x96, 0x5e, 0x2d, 0xad, 0xd7, 0xbb, 0x6e, 0x63,
	0x7b, 0x63, 0xb1, 0x7b, 0x6d, 0x79, 0x0d, 0xcb, 0x86, 0x23, 0xb0, 0x2c, 0xc9, 0x5e, 0x11, 0xab,
	0xdd, 0xa5, 0x47, 0x6b, 0x30, 0x97, 0x8e, 0x9e, 0xe9, 0xd2, 0x4c, 0x87, 0xfa, 0xe5, 0xae, 0x6a,
	0x3d, 0xb8, 0xf8, 0x0f, 0x38, 0x71, 0x81, 0x6f, 0x70, 0x04, 0x5f, 0x00, 0xc1, 0x89, 0x80, 0x33,
	0x5c, 0xb9, 0x10, 0xe1, 0xdf, 0x20, 0x88, 0xcc, 0xaa, 0xee, 0xe9, 0x91, 0x46, 0xb2, 0xc1, 0x04,
	0x61, 0x6e, 0x95, 0xaf, 0xaa, 0xec, 0xcc, 0xac, 0xcc, 0xac, 0x6c, 0x68, 0xcb, 0xf3, 0x94, 0x0b,
	0x3b, 0xcd, 0x12, 0x99, 0x6c, 0xde, 0x1e, 0x25, 0xc9, 0x28, 0xe4, 0xf7, 0x09, 0x1a, 0xe4, 0x47,
	0xf7, 0x65, 0x10, 0x71, 0x21, 0xbd, 0x28, 0xd5, 0x0c, 0x37, 0x2f, 0x32, 0xf0, 0x28, 0x95, 0xe7,
	0x8a, 0x68, 0xfd, 0x6a, 0x0e, 0x5a, 0x1f, 0x79, 0x82, 0x1f, 0x24, 0x3e, 0x0f, 0x59, 0x0f, 0x6a,
	0x81, 0x6f, 0x1a, 0x77, 0x8c, 0xbb, 0x2d, 0xa7, 0x16, 0xf8, 0x6c, 0x05, 0x1a, 0x32, 0x90, 0x21,
	0x37, 0x6b, 0x84, 0x52, 0x00, 0x33, 0xa1, 0x39, 0x4c, 0x62, 0xc9, 0x63, 0x69, 0xce, 0x11, 0xbe,
	0x00, 0x89, 0x92, 0x79, 0xa7, 0x21, 0xcf, 0xcc, 0xba, 0xa6, 0x28, 0x90, 0xbd, 0x0f, 0x0b, 0x69,
	0x3e, 0x70, 0x7d, 0x4f, 0x72, 0xb3, 0x71, 0xc7, 0xb8, 0xdb, 0xde, 0xda, 0xb4, 0x95, 0x5e, 0x76,
	0xa1, 0x97, 0x7d, 0x58, 0x28, 0xee, 0x34, 0xd3, 0x7c, 0xb0, 0xeb, 0x49, 0xce, 0x1e, 0xe0, 0x86,
	0xdc, 0x93, 0xdc, 0x37, 0xe7, 0xbf, 0x5e, 0x4a, 0xb3, 0xb2, 0x35, 0x98, 0x17, 0x49, 0x9e, 0x0d,
	0xb9, 0xd9, 0x24, 0x2d, 0x34, 0x84, 0xea, 0xf1, 0xb3, 0x21, 0xcf, 0x52, 0x69, 0x2e, 0x28, 0xf5,
	0x34, 0x88, 0x12, 0x27, 0x81, 0xcf, 0x13, 0x61, 0xb6, 0xee, 0xcc, 0xa1, 0x84, 0x82, 0x10, 0x1f,
	0x44, 0xde, 0x88, 0x0b, 0x13, 0x14, 0x5e, 0x41, 0x68, 0x98, 0x30, 0x88, 0x8f, 0x85, 0xd9, 0x26,
	0xb4, 0x02, 0x90, 0xdb, 0xcb, 0xe5, 0x38, 0xc9, 0xcc, 0x8e, 0x3a, 0x57, 0x41, 0x8c, 0x41, 0x3d,
	0xf4, 0xe2, 0x91, 0xd9, 0x25, 0x2c, 0xad, 0x91, 0xf7, 0x94, 0x07, 0xa3, 0xb1, 0x34, 0x7b, 0x77,
	0x8c, 0xbb, 0x86, 0xa3, 0x21, 0xab, 0x0f, 0xbd, 0x3e, 0x8f, 0xd1, 0x87, 0xb1, 0x54, 0x4e, 0x79,
	0x19, 0x5a, 0xa2, 0xc0, 0x90, 0x6f, 0x0c, 0x67, 0x82, 0x60, 0xaf, 0x41, 0x37, 0xf2, 0xb2, 0x63,
	0x2e, 0xdd, 0x20, 0x4a, 0xbd, 0xa1, 0x24, 0x57, 0x19, 0x4e, 0x47, 0x21, 0xf7, 0x09, 0x67, 0x65,
	0xb0, 0xb6, 0x93, 0x9d, 0xa7, 0x32, 0x49, 0xbd, 0x38, 0x18, 0xee, 0xc5, 0x32, 0x3b, 0xef, 0x2b,
	0x93, 0x94, 0x1e, 0x36, 0xaa, 0x1e, 0x5e, 0x83, 0xf9, 0x8c, 0x8f, 0x82, 0x24, 0xd6, 0x8e, 0xd7,
	0x10, 0xe2, 0xfd, 0x24, 0xf2, 0x82, 0x58, 0x3b, 0x5e, 0x43, 0xf8, 0x81, 0xa9, 0x27, 0xc7, 0xda,
	0xe9, 0xb4, 0xb6, 0xfe, 0x6e, 0xc0, 0xea, 0xc5, 0x43, 0x3f, 0x4d, 0x24, 0x17, 0x6c, 0x13, 0x16,
	0x62, 0x3e, 0xf2, 0x64, 0x70, 0xa2, 0x8e, 0x6d, 0x38, 0x25, 0x8c, 0xb4, 0x34, 0x11, 0x01, 0xd1,
	0x6a, 0x8a, 0x56, 0xc0, 0x68, 0x88, 0x20, 0x4a, 0x93, 0x4c, 0x7a, 0x3a, 0xf2, 0x1a, 0xce, 0x04,
	0xa1, 0x5c, 0x72, 0xcc, 0x7d, 0x52, 0xa2, 0xe1, 0x28, 0x00, 0xf7, 0xf3, 0x03, 0xa1, 0x08, 0x0d,
	0xb5, 0x5f, 0x01, 0xb3, 0x25, 0x98, 0x0b, 0x93, 0x90, 0x02, 0xab, 0xe1, 0xe0, 0x92, 0xac, 0x91,
	0x9c, 0x05, 0x43, 0x8a, 0x9b, 0x86, 0xa3, 0x00, 0xc4, 0x0a, 0xef, 0x84, 0xfb, 0x14, 0x34, 0x0d,
	0x47, 0x01, 0xd6, 0xa7, 0x60, 0x5e, 0xfc, 0xbc, 0x03, 0x2e, 0x3d, 0xdf, 0x93, 0x1e, 0x06, 0x5a,
	0xc4, 0x85, 0xf0, 0x46, 0x85, 0x5d, 0x0b, 0x90, 0xdd, 0x81, 0xb6, 0xcf, 0xc5, 0x30, 0x0b, 0x52,
	0x39, 0x31, 0x6f, 0x15, 0x65, 0x7d, 0x55, 0x83, 0xe5, 0xca, 0xc6, 0x8e, 0x77, 0x4a, 0x7b, 0xa3,
	0x8d, 0x8f, 0x83, 0xb8, 0xb8, 0x9d, 0xb4, 0xae, 0xf8, 0xa3, 0x36, 0xe5, 0x8f, 0xfb, 0xe5, 0x05,
	0x98, 0xa3, 0x5b, 0xb3, 0x6e, 0xcf, 0x76, 0x7f, 0x79, 0x33, 0xca, 0x30, 0xa8, 0x57, 0xc3, 0xe0,
	0x55, 0xe8, 0xa4, 0xf9, 0x20, 0x0c, 0xc4, 0x98, 0xfb, 0xae, 0x27, 0xc9, 0x80, 0x2d, 0xa7, 0x5d,
	0xe2, 0xb6, 0x25, 0x6a, 0x25, 0xc2, 0x7c, 0x44, 0x46, 0x6c, 0x39, 0xb4, 0xd6, 0x59, 0x44, 0x99,
	0x10, 0xb3, 0xc8, 0x12, 0xcc, 0xe5, 0x59, 0xa8, 0xaf, 0x1c, 0x2e, 0xd9, 0x2d, 0x00, 0x7d, 0x57,
	0x71, 0xdb, 0x16, 0x11, 0x5a, 0x1a, 0xb3, 0x2d, 0xd9, 0x5b, 0xd0, 0x38, 0xc1, 0x48, 0x31, 0x81,
	0xb4, 0x5f, 0xb3, 0x67, 0xc6, 0x91, 0xa3, 0x98, 0x30, 0xb5, 0x44, 0xda, 0xf0, 0x66, 0x9b, 0x04,
	0x36, 0xec, 0xab, 0x3c, 0xe3, 0x94, 0xac, 0xd6, 0xcf, 0x60, 0xb1, 0xc2, 0xf5, 0x31, 0xe7, 0x94,
	0xee, 0x86, 0x49, 0xae, 0x6f, 0x59, 0xc3, 0x51, 0x00, 0xb3, 0xa1, 0x99, 0x71, 0x91, 0x87, 0x52,
	0x98, 0xb5, 0x3b, 0x73, 0x77, 0xdb, 0x5b, 0x2b, 0xf6, 0x0c, 0xff, 0x38, 0x05, 0x93, 0xf5, 0xc5,
	0xd4, 0xc6, 0xcf, 0x13, 0x21, 0xd9, 0x63, 0x58, 0x1d, 0x4e, 0x50, 0x6e, 0xe6, 0x9d, 0xba, 0x1c,
	0x85, 0xe8, 0xa0, 0xab, 0x36, 0x5c, 0x1e, 0xce, 0x88, 0x02, 0x0b, 0x9a, 0x5e, 0x26, 0x83, 0xa1,
	0xce, 0xc9, 0xed, 0xad, 0x05, 0x7b, 0x5b, 0xc1, 0x4e, 0x41, 0xb0, 0x4e, 0x61, 0xf5, 0xa9, 0x17,
	0x71, 0x7f, 0x2f, 0x96, 0x81, 0x3c, 0x7f, 0x36, 0x1c, 0xe6, 0x59, 0xc6, 0xe3, 0x21, 0x67, 0x16,
	0x34, 0x42, 0x6f, 0xc0, 0x43, 0x3a, 0xb6, 0xb7, 0xd5, 0xb1, 0x2b, 0x6c, 0x8e, 0x22, 0x51, 0xb0,
	0x4b, 0x2f, 0x53, 0x79, 0xa4, 0xeb, 0x28, 0x00, 0x5d, 0xc8, 0x63, 0x9f, 0xa2, 0xa9, 0xeb, 0xe0,
	0x12, 0x1d, 0x2f, 0xf9, 0x99, 0x2c, 0xae, 0x3c, 0xae, 0xad, 0x7f, 0xd4, 0x81, 0x4d, 0xb6, 0x0c,
	0xb8, 0x50, 0x09, 0xcc, 0x84, 0xa6, 0x38, 0x8f, 0x06, 0x49, 0x28, 0x4c, 0x83, 0xd2, 0x65, 0x01,
	0x32, 0x1b, 0xe6, 0x3d, 0x21, 0x78, 0x69, 0xd9, 0x35, 0x7b, 0xa6, 0xe2, 0x8e, 0xe6, 0x62, 0xef,
	0x40, 0x33, 0xe5, 0x99, 0x48, 0x62, 0x61, 0xce, 0x5d, 0x2b, 0x50, 0xb0, 0xb1, 0x07, 0xd0, 0x1a,
	0x26, 0x11, 0xda, 0x90, 0x0b, 0xb3, 0x7e, 0xad, 0xcc, 0x84, 0x91, 0x7d, 0x00, 0xdd, 0x24, 0x1b,
	0x79, 0x71, 0xf0, 0x4b, 0x0f, 0xef, 0xa4, 0x30, 0x1b, 0xd7, 0x4a, 0x4e, 0x33, 0xe3, 0x99, 0x61,
	0x32, 0xd4, 0x92, 0xf3, 0xd7, 0x9f, 0x59, 0x32, 0xa2, 0x14, 0x3f, 0x1b, 0x8e, 0xbd, 0x18, 0xab,
	0x4d, 0xf3, 0x7a, 0xa9, 0x92, 0x91, 0xdd, 0x83, 0x7a, 0x14, 0x88, 0xa1, 0xb9, 0x70, 0xad, 0x00,
	0xf1, 0x90, 0xcb, 0xbc, 0x51, 0x51, 0xe2, 0x68, 0xcd, 0x0e, 0xa0, 0x47, 0xb6, 0x75, 0xb1, 0x98,
	0x90, 0xc2, 0x40, 0x3b, 0xbd, 0x61, 0x5f, 0x76, 0xa4, 0xbd, 0x8d, 0x9c, 0x07, 0x9a, 0x51, 0x05,
	0x69, 0xd7, 0xab, 0xe2, 0xd8, 0x6d, 0x68, 0xab, 0x8c, 0xe2, 0x52, 0x70, 0xb4, 0x29, 0x38, 0x40,
	0xa1, 0x0e, 0xf9, 0x99, 0xdc, 0xfc, 0x10, 0xd8, 0xe5, 0x5d, 0x30, 0xbc, 0x8e, 0xf9, 0xb9, 0x4e,
	0x6d, 0xb8, 0xc4, 0x30, 0x3c, 0xf1, 0xc2, 0xbc, 0x28, 0x02, 0x0a, 0x78, 0x54, 0x7b, 0x68, 0x58,
	0x7f, 0x36, 0xa0, 0xa9, 0x43, 0x9e, 0xbd, 0x02, 0xf5, 0x81, 0x27, 0xb8, 0xbe, 0x46, 0x60, 0x97,
	0x9d, 0x8c, 0x43, 0x78, 0xf6, 0x76, 0xb5, 0x74, 0xaa, 0xfb, 0xb2, 0x68, 0x4f, 0x97, 0xd7, 0x6a,
	0x2d, 0x7d, 0x04, 0xbd, 0x18, 0xbf, 0x1a, 0x2f, 0x27, 0x7d, 0xb6, 0x4e, 0x9f, 0xcb, 0x33, 0x8c,
	0xe1, 0x74, 0xe3, 0x2a, 0x8e, 0x6d, 0x01, 0x50, 0xd2, 0x74, 0x29, 0x0f, 0xd5, 0xaf, 0x96, 0x6b,
	0x11, 0xdb, 0x2e, 0xa6, 0xa0, 0x3f, 0x19, 0xd0, 0x7e, 0x21, 0x78, 0x76, 0xa0, 0x8b, 0xc3, 0x77,
	0xe8, 0x73, 0x18, 0xd4, 0x73, 0x51, 0xb6, 0x71, 0xb4, 0xae, 0x56, 0xb5, 0xc6, 0x54, 0x55, 0xb3,
	0x76, 0xe1, 0xc6, 0x47, 0x81, 0x8c, 0xf8, 0x59, 0xf5, 0x6b, 0xee, 0x43, 0x07, 0xc5, 0xdc, 0x6a,
	0x25, 0x6c, 0x6f, 0x75, 0xec, 0x0a, 0x8f, 0xd3, 0xce, 0x27, 0x80, 0xf5, 0x95, 0x01, 0xcb, 0x87,
	0x3c, 0xe4, 0xa3, 0xcc, 0x8b, 0xbe, 0xcd, 0x46, 0xec, 0x75, 0xe8, 0xe9, 0x0c, 0xe3, 0x0e, 0xbc,
	0xe1, 0x71, 0x9e, 0x52, 0x7a, 0x69, 0x39, 0x5d, 0x8d, 0xfd, 0x88, 0x90, 0x54, 0x85, 0xc6, 0x5e,
	0x1c, 0xf3, 0xd0, 0x0d, 0xfc, 0xa2, 0xa1, 0xd0, 0x98, 0x7d, 0x9f, 0x3d, 0x04, 0xb3, 0x20, 0x8b,
	0x7c, 0x80, 0x05, 0x7a, 0xc0, 0x33, 0x57, 0x15, 0x08, 0xd5, 0x63, 0xac, 0x69, 0x7a, 0xbf, 0x24,
	0xef, 0x50, 0xc5, 0xb8, 0x05, 0xa0, 0x75, 0xc5, 0x8d, 0xd1, 0x56, 0x73, 0x4e, 0x4b, 0x63, 0xf6,
	0x7d, 0xeb, 0x0b, 0x60, 0xbb, 0x81, 0x18, 0x26, 0x99, 0xff, 0xad, 0xbe, 0x72, 0x5a, 0xfd, 0x9a,
	0x2e, 0xa2, 0xa5, 0xfa, 0x1b, 0xb0, 0x30, 0xca, 0x83, 0xd0, 0x2f, 0xbe, 0xad, 0xe5, 0x34, 0x09,
	0xde, 0xf7, 0xad, 0x04, 0xcc, 0x9d, 0x24, 0xc2, 0x18, 0x21, 0x7d, 0xb1, 0x83, 0xee, 0xc7, 0x5e,
	0x2a, 0xc6, 0x09, 0x56, 0xbb, 0x3a, 0x86, 0x8f, 0x3e, 0xfe, 0xba, 0x76, 0x9b, 0xf8, 0xb0, 0xff,
	0x1c, 0xaa, 0xbd, 0xb4, 0x69, 0xd4, 0x85, 0xed, 0x0c, 0x2b, 0x07, 0x58, 0xbf, 0xa9, 0x41, 0x53,
	0x9f, 0x88, 0xdd, 0xc1, 0xfe, 0x6e, 0xf9, 0xc6, 0xd8, 0xc5, 0x48, 0xc3, 0xd0, 0xd3, 0x1f, 0x40,
	0x6b, 0xec, 0xf4, 0x52, 0x9e, 0x45, 0x1e, 0xb6, 0xd5, 0x5a, 0xf9, 0x09, 0x82, 0xbd, 0x52, 0x76,
	0x0f, 0x2f, 0x0e, 0x77, 0xc8, 0x15, 0x75, 0xa7, 0x82, 0xc1, 0x38, 0xf5, 0x79, 0xc8, 0xa5, 0x6e,
	0xf9, 0x16, 0x9c, 0x02, 0xa4, 0x4e, 0x24, 0x15, 0xd4, 0x71, 0x37, 0x1c, 0x5c, 0x62, 0x9e, 0xf1,
	0x93, 0xd3, 0x58, 0x98, 0x8b, 0x2a, 0xcf, 0x10, 0x50, 0xf4, 0x92, 0xc2, 0x5c, 0x22, 0x79, 0x05,
	0xa0, 0xa6, 0x83, 0xc4, 0x3f, 0x2f, 0x7a, 0x1d, 0x5c, 0x53, 0x73, 0x9e, 0x0f, 0x32, 0xee, 0xfb,
	0x81, 0xd4, 0xaf, 0x8d, 0x09, 0x02, 0xab, 0x75, 0xc6, 0xd3, 0x10, 0xaf, 0x9e, 0x4a, 0xd0, 0x0b,
	0xb6, 0x36, 0x83, 0x53, 0x10, 0xac, 0xbf, 0xce, 0xc3, 0xa2, 0x43, 0xec, 0xd8, 0x2a, 0x94, 0xef,
	0xb0, 0x29, 0x1b, 0x4d, 0x7f, 0x71, 0xed, 0xd2, 0x17, 0x97, 0xed, 0xdb, 0x5c, 0xb5, 0x7d, 0x5b,
	0x82, 0xb9, 0x17, 0xce, 0x13, 0x7d, 0x85, 0xe7, 0x72, 0xe7, 0x49, 0xe5, 0x81, 0xd2, 0x98, 0x7a,
	0xa0, 0xdc, 0xc4, 0xc4, 0x12, 0x1e, 0xa9, 0xa4, 0xad, 0x3e, 0x6f, 0x01, 0x11, 0x98, 0xb2, 0x4b,
	0x07, 0xb5, 0xaf, 0x72, 0x50, 0xe7, 0xa2, 0x83, 0x2a, 0x0e, 0xe8, 0xfe, 0x37, 0x1d, 0xf0, 0x2a,
	0x74, 0xe2, 0x3c, 0x72, 0x75, 0x68, 0x09, 0xf3, 0x06, 0x89, 0xb4, 0xe3, 0x3c, 0xd2, 0x56, 0x25,
	0x41, 0xbc, 0x59, 0xdc, 0x64, 0xba, 0x57, 0x47, 0xa0, 0xea, 0x87, 0xe5, 0x2b, 0xfc, 0x50, 0xe9,
	0xa5, 0x57, 0xa6, 0x7a, 0xe9, 0x3b, 0xd0, 0xee, 0x17, 0x0e, 0xdd, 0xdf, 0x35, 0x57, 0x55, 0x0f,
	0x2c, 0x26, 0x28, 0x94, 0x1c, 0x07, 0xbe, 0xcf, 0x63, 0x73, 0x8d, 0xb4, 0xd5, 0x10, 0xe2, 0xc3,
	0x64, 0x88, 0x2f, 0x8f, 0x75, 0x85, 0x57, 0x10, 0x1a, 0x4f, 0x8e, 0xf3, 0x68, 0x10, 0x7b, 0x41,
	0x68, 0x9a, 0xca, 0x78, 0x25, 0x02, 0xa5, 0x46, 0x41, 0xe8, 0x73, 0xdf, 0xdc, 0xa0, 0x4f, 0xd0,
	0x10, 0xfb, 0x1e, 0x74, 0xfd, 0x40, 0xc8, 0x20, 0x1e, 0xe5, 0xd4, 0x7c, 0x9b, 0x9b, 0x24, 0x39,
	0x8d, 0xc4, 0xf7, 0x8e, 0x90, 0xc1, 0xf0, 0x38, 0xe0, 0xbe, 0x79, 0x93, 0x4e, 0x2d, 0x61, 0xf6,
	0x1e, 0xac, 0x05, 0xc2, 0x55, 0x6a, 0xbb, 0x11, 0xf7, 0x03, 0xcf, 0xd5, 0x5f, 0xfc, 0x32, 0x71,
	0x2e, 0x07, 0x42, 0x05, 0xe2, 0x01, 0xd2, 0x76, 0xd5, 0xe7, 0x3f, 0x83, 0xb5, 0xa9, 0xfb, 0xed,
	0x0a, 0x9d, 0x29, 0x74, 0x8f, 0xb2, 0x61, 0x5f, 0x95, 0x4a, 0x9c, 0x95, 0x6a, 0x0e, 0x28, 0x13,
	0xcc, 0x06, 0x2c, 0x8c, 0x13, 0xe9, 0x66, 0x9e, 0xe4, 0xf4, 0x24, 0x30, 0x9c, 0x26, 0x32, 0xe3,
	0x6b, 0x7f, 0xea, 0x32, 0xb5, 0x2e, 0x5e, 0xa6, 0x75, 0x68, 0x06, 0xc2, 0xc5, 0xb0, 0xa4, 0x77,
	0xc1, 0x82, 0x33, 0x1f, 0x88, 0x3e, 0x0f, 0x8f, 0x28, 0x40, 0xc5, 0xd1, 0xa9, 0x79, 0x8b, 0xb0,
	0xb4, 0xb6, 0xfe, 0x69, 0x00, 0x4c, 0x6e, 0xd5, 0xff, 0x79, 0xa3, 0xc0, 0xde, 0x85, 0xb6, 0x76,
	0x5b, 0x9a, 0x08, 0xa9, 0x07, 0x28, 0x4b, 0xf6, 0x85, 0xb4, 0xe1, 0x40, 0x56, 0x22, 0xac, 0x3f,
	0xb4, 0xa0, 0xbb, 0x77, 0x26, 0x79, 0xec, 0x73, 0xff, 0xf0, 0x94, 0x73, 0xc9, 0xde, 0x84, 0xc5,
	0x23, 0xef, 0x24, 0xc9, 0xb3, 0x40, 0x72, 0xb7, 0xfa, 0xce, 0xe9, 0x95, 0x68, 0x55, 0xbe, 0x5e,
	0x85, 0xce, 0x51, 0x10, 0x4a, 0x9e, 0xb9, 0x21, 0x3f, 0xe1, 0x61, 0xf1, 0x48, 0x55, 0xb8, 0x27,
	0x88, 0x62, 0xab, 0x30, 0x1f, 0xf8, 0xae, 0x90, 0x59, 0x91, 0x71, 0x02, 0xbf, 0x2f, 0x33, 0xf6,
	0x00, 0xd6, 0x83, 0xd8, 0xc5, 0x1b, 0x75, 0xee, 0xca, 0xc4, 0x15, 0xc3, 0x8c, 0xf3, 0xd8, 0xa5,
	0xec, 0xa1, 0xb2, 0xd0, 0x72, 0x10, 0x3b, 0x48, 0x3d, 0x4c, 0xfa, 0x44, 0xc3, 0xcf, 0x66, 0x3f,
	0x84, 0x8d, 0x29, 0x29, 0xe9, 0xc9, 0x5c, 0xb8, 0x7a, 0x7f, 0x95, 0xa8, 0x56, 0x26, 0x72, 0x44,
	0xdd, 0xa7, 0xe3, 0xde, 0x9b, 0x3e, 0x8e, 0xca, 0xa7, 0x16, 0x53, 0x49, 0x8c, 0x95, 0x62, 0x58,
	0x45, 0x95, 0xd0, 0x1b, 0xb0, 0x18, 0x08, 0xf7, 0xf3, 0x3c, 0x91, 0x5c, 0x1f, 0xa5, 0xf3, 0x76,
	0x37, 0x10, 0x3f, 0x45, 0xac, 0x3a, 0xa1, 0x1c, 0xda, 0x2c, 0x54, 0x86, 0x36, 0x6f, 0x03, 0x4b,
	0x13, 0x21, 0x82, 0x41, 0x78, 0xee, 0x0a, 0x1e, 0xeb, 0x39, 0x45, 0x8b, 0xe2, 0xee, 0x46, 0x41,
	0xe9, 0x17, 0x04, 0xec, 0x86, 0xd5, 0x39, 0xca, 0xda, 0x40, 0xd6, 0x06, 0x42, 0x29, 0x4b, 0xdf,
	0x46, 0xbf, 0xa2, 0xf6, 0x8a, 0xa1, 0xad, 0x18, 0x08, 0xa5, 0x18, 0x5e, 0x83, 0x6e, 0xc6, 0x25,
	0xba, 0x4f, 0xb3, 0x74, 0x54, 0x75, 0xd5, 0xc8, 0x92, 0x49, 0x77, 0x0e, 0xba, 0x85, 0xef, 0x52,
	0xb7, 0xd3, 0x51, 0xcd, 0x82, 0xee, 0xcc, 0x27, 0x33, 0xb1, 0xde, 0xd4, 0x4c, 0xec, 0x1e, 0xdc,
	0x50, 0x45, 0xc0, 0xad, 0xbc, 0xc8, 0x17, 0x89, 0x65, 0x51, 0x11, 0x76, 0xca, 0x77, 0xf9, 0x03,
	0x58, 0xd3, 0xbc, 0x3e, 0x3f, 0xf2, 0xf2, 0x50, 0xba, 0x69, 0x96, 0x1c, 0x05, 0x21, 0xd7, 0x69,
	0x7a, 0x45, 0x51, 0x77, 0x15, 0xf1, 0xb9, 0xa2, 0xb1, 0x1f, 0xc3, 0xcb, 0xb3, 0xa5, 0x5c, 0x1a,
	0xa6, 0x51, 0x16, 0x5f, 0x70, 0x36, 0x66, 0xc9, 0xee, 0x23, 0x43, 0xe5, 0xd8, 0xa3, 0x24, 0x0c,
	0x93, 0x53, 0x9e, 0x09, 0x6d, 0x0d, 0x95, 0xe4, 0xf5, 0xb1, 0x1f, 0x17, 0x44, 0x65, 0x95, 0x77,
	0x60, 0xa5, 0x90, 0xca, 0x02, 0x1e, 0xfb, 0x85, 0xcc, 0x32, 0xc9, 0x30, 0x2d, 0xa3, 0x48, 0x4a,
	0xc2, 0x82, 0xae, 0x96, 0xd0, 0x41, 0xa4, 0x0a, 0x41, 0x5b, 0x21, 0x55, 0xf4, 0xdc, 0x06, 0x0d,
	0xba, 0x14, 0x1c, 0xaa, 0x1a, 0x80, 0x42, 0x3d, 0xc1, 0x10, 0x79, 0x13, 0x16, 0x0b, 0x06, 0xfd,
	0xb4, 0xa3, 0xaa, 0xd0, 0x72, 0x7a, 0x9a, 0x49, 0x63, 0x2b, 0x3b, 0xd1, 0xfd, 0x58, 0xaf, 0xee,
	0x44, 0xd7, 0xe2, 0x2d, 0xd0, 0x4a, 0x4e, 0xdd, 0x23, 0x55, 0x2f, 0x96, 0x14, 0xa5, 0x72, 0x89,
	0x3e, 0x84, 0x5b, 0x9a, 0x7b, 0xca, 0xba, 0x6e, 0x9e, 0x85, 0xee, 0x58, 0xca, 0x94, 0xaa, 0x49,
	0xab, 0x30, 0x73, 0xd5, 0xbe, 0x2f, 0xb2, 0xf0, 0xb1, 0x94, 0x29, 0xdb, 0x82, 0xd5, 0xe2, 0x3c,
	0xba, 0x01, 0xbc, 0xb0, 0xd8, 0x26, 0x59, 0x6c, 0x59, 0x1f, 0xa9, 0x69, 0xca, 0x64, 0xd8, 0x98,
	0x78, 0x92, 0x8f, 0x92, 0x0c, 0x93, 0xe0, 0x4d, 0x8a, 0xbb, 0x0a, 0x86, 0x4a, 0x5d, 0x96, 0xc7,
	0x43, 0x9a, 0xe0, 0xaa, 0x2a, 0x33, 0x41, 0x60, 0xdb, 0x71, 0x94, 0x87, 0xa1, 0x6a, 0x3b, 0x6e,
	0xa9, 0xb6, 0x03, 0x11, 0xd8, 0x76, 0x58, 0x7f, 0x31, 0xa0, 0xa1, 0x12, 0xd7, 0x77, 0x28, 0x79,
	0xbf, 0x0f, 0x3d, 0xae, 0x93, 0xaa, 0x4b, 0x37, 0x50, 0x27, 0xf0, 0x9e, 0x3d, 0x95, 0x6b, 0x9d,
	0x2e, 0xaf, 0x82, 0xd6, 0xef, 0xeb, 0xb0, 0x58, 0x2a, 0xb4, 0xe3, 0xc5, 0x7e, 0xc8, 0x2f, 0xcd,
	0xda, 0x7f, 0x04, 0x40, 0xb3, 0x16, 0x97, 0xda, 0xef, 0xda, 0xd7, 0xb6, 0xdf, 0x2d, 0xe2, 0x46,
	0x18, 0xbd, 0x90, 0x71, 0x91, 0x84, 0x39, 0x85, 0x9b, 0xca, 0xc8, 0x15, 0x0c, 0x36, 0x45, 0xf4,
	0x4c, 0x2f, 0xa6, 0x7b, 0x04, 0x50, 0x37, 0xa5, 0xc7, 0xae, 0xae, 0xc8, 0x23, 0xca, 0xb4, 0x86,
	0xd3, 0x2e, 0x70, 0xfd, 0x3c, 0xc2, 0x87, 0x54, 0xc9, 0xa2, 0x62, 0x41, 0x0d, 0x4b, 0xbb, 0x05,
	0xb6, 0x2c, 0x18, 0xc5, 0x90, 0x96, 0x76, 0x6a, 0xaa, 0x9d, 0x0a, 0x9c, 0xde, 0xa9, 0x64, 0x51,
	0x3b, 0xa9, 0x61, 0x6a, 0xb7, 0xc0, 0x96, 0xa9, 0xac, 0x74, 0x94, 0xeb, 0x9d, 0x8c, 0x28, 0xb7,
	0x1a, 0x4e, 0xa7, 0x44, 0x6e, 0x9f, 0x8c, 0x30, 0x1f, 0x24, 0x29, 0x8f, 0xdd, 0x2a, 0x27, 0xcf,
	0x30, 0x95, 0x00, 0x71, 0xaf, 0x20, 0xb5, 0x3f, 0x91, 0x20, 0x1a, 0x4a, 0x8d, 0x83, 0xd1, 0x78,
	0x86, 0x54, 0x5b, 0x49, 0x21, 0xf5, 0x92, 0xd4, 0x16, 0xac, 0x86, 0xc9, 0xe9, 0x0c, 0xa1, 0x0e,
	0x09, 0x2d, 0x87, 0xc9, 0xe9, 0x25, 0x99, 0x1f, 0xc0, 0xfa, 0x30, 0x4c, 0x04, 0x9f, 0x21, 0xd5,
	0x25, 0xa9, 0x55, 0x22, 0x5f, 0x92, 0x33, 0xa1, 0x99, 0xa7, 0x3e, 0x5d, 0x95, 0x9e, 0x6a, 0x9b,
	0x35, 0x68, 0xed, 0x41, 0x87, 0xa6, 0x26, 0xe2, 0x63, 0xaa, 0xc1, 0xd4, 0xc7, 0xab, 0xb9, 0x59,
	0x5d, 0xfd, 0x96, 0xd0, 0xf3, 0xb1, 0x5b, 0x00, 0x5e, 0x18, 0xba, 0x9a, 0xa6, 0x1e, 0x3f, 0x2d,
	0x2f, 0x0c, 0x95, 0xb0, 0x15, 0xc1, 0xfa, 0xf6, 0x68, 0x94, 0x91, 0xef, 0x92, 0x58, 0xc5, 0xa1,
	0xde, 0x71, 0x3a, 0x84, 0x8c, 0x4b, 0x21, 0xb4, 0x05, 0x6a, 0xd2, 0x23, 0x5c, 0xd5, 0x06, 0xe8,
	0x00, 0xed, 0xda, 0x55, 0xbd, 0x9c, 0x8e, 0x57, 0x81, 0xac, 0x2f, 0x0d, 0x30, 0xcb, 0x8f, 0x7c,
	0x1c, 0x08, 0x99, 0x64, 0xc1, 0xd0, 0xe1, 0x9f, 0xe7, 0x5c, 0xd0, 0x3b, 0xf3, 0x28, 0x4b, 0xa2,
	0x6f, 0xf2, 0xce, 0x44, 0x3e, 0x76, 0x0f, 0x6a, 0x32, 0xf9, 0x06, 0xd7, 0xa2, 0x26, 0x93, 0xff,
	0xec, 0x3e, 0x58, 0xbf, 0x36, 0x60, 0xf1, 0x7f, 0xa9, 0xe5, 0xeb, 0x30, 0xaf, 0x6d, 0x59, 0x9f,
	0x65, 0x4b, 0x4d, 0xb4, 0x6e, 0x43, 0x83, 0xf0, 0x54, 0xc1, 0x69, 0x7e, 0x51, 0x0c, 0xfb, 0x15,
	0x64, 0xbd, 0x05, 0x40, 0x0c, 0xfb, 0x92, 0x47, 0x82, 0xbd, 0x52, 0x86, 0x86, 0x41, 0xfd, 0xf9,
	0xbc, 0xda, 0xb5, 0x08, 0x11, 0x2b, 0x81, 0xc6, 0xf6, 0x68, 0xb4, 0x4f, 0x03, 0xdc, 0x73, 0xee,
	0x65, 0xba, 0x07, 0xa4, 0x35, 0x1a, 0x26, 0x4a, 0x62, 0x39, 0x2e, 0xa6, 0x6e, 0x04, 0xe0, 0xa3,
	0xcd, 0xf7, 0xce, 0xf5, 0x80, 0x04, 0x97, 0x28, 0x3b, 0x4e, 0xf2, 0x4c, 0x8f, 0x41, 0x68, 0x8d,
	0xea, 0x45, 0x41, 0x9c, 0xeb, 0xff, 0x7b, 0x0d, 0x47, 0x43, 0xd6, 0xef, 0x0c, 0xb8, 0x71, 0x29,
	0xea, 0xd8, 0x5a, 0x99, 0xfd, 0x48, 0x45, 0xd4, 0xa8, 0xf8, 0xe3, 0xa8, 0x5c, 0x53, 0xab, 0xa6,
	0xaa, 0xaf, 0x73, 0x68, 0x0f, 0x6a, 0xe9, 0x09, 0x69, 0x33, 0xe7, 0xd4, 0xd2, 0x13, 0x84, 0xe3,
	0x13, 0x3d, 0x78, 0xa9, 0xc5, 0x04, 0xa7, 0x82, 0x72, 0x97, 0xe1, 0xd4, 0x52, 0x41, 0x74, 0xa1,
	0xd3, 0x54, 0x2d, 0x16, 0xac, 0x03, 0x86, 0xa7, 0x1f, 0x23, 0x86, 0x77, 0xef, 0xb7, 0x06, 0xb4,
	0x2b, 0x73, 0x54, 0xb6, 0x04, 0x9d, 0xed, 0x7e, 0x7f, 0xef, 0xd0, 0xdd, 0x7b, 0x7a, 0xb8, 0x7f,
	0xf8, 0xd9, 0xd2, 0x4b, 0xec, 0x06, 0x74, 0x9f, 0xef, 0x39, 0xfd, 0x67, 0x4f, 0x0b, 0x94, 0xc1,
	0x96, 0x61, 0xf1, 0xc9, 0xb3, 0x9d, 0xed, 0xc3, 0xfd, 0x09, 0xb2, 0xc6, 0x18, 0xf4, 0x76, 0x9e,
	0x1d, 0x3c, 0xdf, 0x7e, 0xfa, 0x59, 0x81, 0x9b, 0x43, 0xc6, 0xbd, 0x9f, 0xef, 0x3c, 0xde, 0x7e,
	0xfa, 0xc9, 0x5e, 0x81, 0xac, 0xb3, 0x45, 0x68, 0x1f, 0xec, 0xf7, 0x77, 0x0a, 0x44, 0x83, 0xad,
	0xc3, 0xf2, 0x33, 0xe7, 0x93, 0xed, 0xa7, 0xfb, 0xbf, 0x98, 0xda, 0x72, 0x7e, 0xeb, 0x6f, 0x35,
	0xe8, 0xea, 0x09, 0x90, 0x78, 0x9e, 0x25, 0x67, 0xe7, 0xec, 0x3e, 0x2c, 0x95, 0x03, 0xa8, 0x62,
	0x30, 0x3a, 0x1d, 0x4b, 0x9b, 0xe5, 0x4f, 0x02, 0xeb, 0xa5, 0x77, 0x0c, 0xf6, 0x7d, 0xe8, 0x95,
	0x02, 0xaa, 0xc2, 0x5e, 0x60, 0x9f, 0xb7, 0x55, 0xd9, 0x42, 0xe6, 0x77, 0x61, 0xb1, 0x64, 0x56,
	0xef, 0x8d, 0x8b, 0xdc, 0xed, 0xca, 0x3b, 0x84, 0x44, 0x1e, 0x55, 0x14, 0xd2, 0x83, 0xae, 0x8b,
	0x32, 0xcb, 0xf6, 0xe5, 0x09, 0x18, 0xc9, 0x7e, 0x00, 0x37, 0x26, 0xba, 0xe9, 0x59, 0xe0, 0x45,
	0xe1, 0x15, 0x7b, 0xc6, 0x94, 0x90, 0xa4, 0x1f, 0x56, 0x94, 0x55, 0x03, 0xc9, 0x8b, 0xb2, 0xcc,
	0xbe, 0x34, 0xa8, 0x44, 0xc9, 0xad, 0x47, 0xd0, 0xc4, 0x97, 0x16, 0x06, 0xdb, 0x7d, 0x98, 0x57,
	0x22, 0x6c, 0xed, 0xd2, 0x0d, 0xde, 0x8b, 0x52, 0x79, 0xbe, 0xd9, 0xb6, 0x27, 0x17, 0xce, 0x7a,
	0x69, 0xeb, 0x4b, 0x03, 0x3a, 0x45, 0xe2, 0xa0, 0xe7, 0x9a, 0x0d, 0xbd, 0x02, 0x26, 0x43, 0x0a,
	0xb6, 0x64, 0x5f, 0xc8, 0x2c, 0x53, 0x36, 0xde, 0x82, 0xa5, 0x82, 0xac, 0xfd, 0x34, 0x4b, 0x62,
	0xda, 0x89, 0x0f, 0x61, 0x79, 0xc2, 0x50, 0x98, 0x7f, 0x96, 0xd8, 0x45, 0xf7, 0x6c, 0xfd, 0xb1,
	0x06, 0x50, 0xa6, 0x65, 0xc1, 0x9e, 0xc0, 0x7a, 0x21, 0xd2, 0x4f, 0x86, 0x81, 0x17, 0x96, 0x34,
	0xb6, 0x61, 0x5f, 0x95, 0xbe, 0x37, 0x99, 0x7d, 0xe9, 0x4e, 0x93, 0x5a, 0x3f, 0x81, 0xd5, 0x82,
	0xf5, 0x29, 0x3f, 0x15, 0xdf, 0x6a, 0xaf, 0x27, 0x60, 0x96, 0xde, 0xbc, 0xa8, 0x9a, 0x69, 0x5f,
	0x51, 0xc9, 0xae, 0xd1, 0x6c, 0xad, 0xdc, 0x6d, 0x5a, 0xb5, 0x7f, 0x7b, 0xaf, 0xc1, 0x3c, 0x05,
	0xc4, 0x7b, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x69, 0xca, 0x5e, 0x1f, 0x89, 0x21, 0x00, 0x00,
}